// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quark.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "quark.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace llql_proto {

namespace {

const ::google::protobuf::Descriptor* ColData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPartition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPartition_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuarkCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuarkCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* QuarkCmd_CmdType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HostInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HostInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LLQLCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LLQLCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LLQLCmd_CmdType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AdminCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdminCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AdminCmd_CmdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Magic_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_quark_2eproto() {
  protobuf_AddDesc_quark_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "quark.proto");
  GOOGLE_CHECK(file != NULL);
  ColData_descriptor_ = file->message_type(0);
  static const int ColData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColData, isnull_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColData, boolval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColData, i32val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColData, i64val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColData, floatval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColData, doubleval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColData, strval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColData, bytesval_),
  };
  ColData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColData_descriptor_,
      ColData::default_instance_,
      ColData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColData));
  RelData_descriptor_ = file->message_type(1);
  static const int RelData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelData, last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelData, ntuple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelData, ncol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelData, cols_),
  };
  RelData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelData_descriptor_,
      RelData::default_instance_,
      RelData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelData));
  QueryPartition_descriptor_ = file->message_type(2);
  static const int QueryPartition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPartition, query_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPartition, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPartition, partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPartition, total_partition_),
  };
  QueryPartition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryPartition_descriptor_,
      QueryPartition::default_instance_,
      QueryPartition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPartition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPartition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryPartition));
  QuarkCmd_descriptor_ = file->message_type(3);
  static const int QuarkCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuarkCmd, ct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuarkCmd, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuarkCmd, query_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuarkCmd, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuarkCmd, query_partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuarkCmd, query_result_),
  };
  QuarkCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuarkCmd_descriptor_,
      QuarkCmd::default_instance_,
      QuarkCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuarkCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuarkCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuarkCmd));
  QuarkCmd_CmdType_descriptor_ = QuarkCmd_descriptor_->enum_type(0);
  HostInfo_descriptor_ = file->message_type(4);
  static const int HostInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostInfo, host_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostInfo, host_gen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostInfo, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostInfo, listen_port_),
  };
  HostInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HostInfo_descriptor_,
      HostInfo::default_instance_,
      HostInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HostInfo));
  LLQLCmd_descriptor_ = file->message_type(5);
  static const int LLQLCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LLQLCmd, ct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LLQLCmd, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LLQLCmd, host_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LLQLCmd, query_partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LLQLCmd, query_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LLQLCmd, query_result_),
  };
  LLQLCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LLQLCmd_descriptor_,
      LLQLCmd::default_instance_,
      LLQLCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LLQLCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LLQLCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LLQLCmd));
  LLQLCmd_CmdType_descriptor_ = LLQLCmd_descriptor_->enum_type(0);
  AdminCmd_descriptor_ = file->message_type(6);
  static const int AdminCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminCmd, ct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminCmd, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminCmd, result_),
  };
  AdminCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdminCmd_descriptor_,
      AdminCmd::default_instance_,
      AdminCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdminCmd));
  AdminCmd_CmdType_descriptor_ = AdminCmd_descriptor_->enum_type(0);
  Magic_descriptor_ = file->enum_type(0);
  MessageType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_quark_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColData_descriptor_, &ColData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelData_descriptor_, &RelData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryPartition_descriptor_, &QueryPartition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuarkCmd_descriptor_, &QuarkCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HostInfo_descriptor_, &HostInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LLQLCmd_descriptor_, &LLQLCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdminCmd_descriptor_, &AdminCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_quark_2eproto() {
  delete ColData::default_instance_;
  delete ColData_reflection_;
  delete RelData::default_instance_;
  delete RelData_reflection_;
  delete QueryPartition::default_instance_;
  delete QueryPartition_reflection_;
  delete QuarkCmd::default_instance_;
  delete QuarkCmd_reflection_;
  delete HostInfo::default_instance_;
  delete HostInfo_reflection_;
  delete LLQLCmd::default_instance_;
  delete LLQLCmd_reflection_;
  delete AdminCmd::default_instance_;
  delete AdminCmd_reflection_;
}

void protobuf_AddDesc_quark_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::llql_proto::protobuf_AddDesc_err_2eproto();
  ::llql_proto::protobuf_AddDesc_query_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013quark.proto\022\nllql_proto\032\terr.proto\032\013qu"
    "ery.proto\"\221\001\n\007ColData\022\016\n\006isnull\030\001 \003(\010\022\017\n"
    "\007boolval\030\002 \003(\010\022\016\n\006i32val\030\003 \003(\005\022\016\n\006i64val"
    "\030\004 \003(\003\022\020\n\010floatval\030\005 \003(\002\022\021\n\tdoubleval\030\006 "
    "\003(\001\022\016\n\006strval\030\007 \003(\t\022\020\n\010bytesval\030\010 \003(\014\"X\n"
    "\007RelData\022\014\n\004last\030\001 \002(\010\022\016\n\006ntuple\030\002 \002(\005\022\014"
    "\n\004ncol\030\003 \002(\005\022!\n\004cols\030\004 \003(\0132\023.llql_proto."
    "ColData\"`\n\016QueryPartition\022\020\n\010query_id\030\001 "
    "\002(\t\022\020\n\010stage_id\030\002 \002(\005\022\021\n\tpartition\030\003 \002(\005"
    "\022\027\n\017total_partition\030\004 \002(\005\"\243\002\n\010QuarkCmd\022("
    "\n\002ct\030\001 \002(\0162\034.llql_proto.QuarkCmd.CmdType"
    "\022\036\n\003err\030\002 \001(\0132\021.llql_proto.Error\022\020\n\010quer"
    "y_id\030\003 \001(\t\022\r\n\005query\030\004 \001(\014\0223\n\017query_parti"
    "tion\030\005 \001(\0132\032.llql_proto.QueryPartition\022)"
    "\n\014query_result\030\006 \001(\0132\023.llql_proto.RelDat"
    "a\"L\n\007CmdType\022\n\n\006RETURN\020\000\022\022\n\016REGISTER_QUE"
    "RY\020\001\022\021\n\rEXECUTE_QUERY\020\002\022\016\n\nSTOP_QUERY\020\003\""
    "T\n\010HostInfo\022\017\n\007host_id\030\001 \002(\005\022\020\n\010host_gen"
    "\030\002 \002(\005\022\020\n\010hostname\030\003 \002(\t\022\023\n\013listen_port\030"
    "\004 \002(\005\"\351\002\n\007LLQLCmd\022\'\n\002ct\030\001 \002(\0162\033.llql_pro"
    "to.LLQLCmd.CmdType\022\036\n\003err\030\002 \001(\0132\021.llql_p"
    "roto.Error\022\'\n\thost_info\030\003 \003(\0132\024.llql_pro"
    "to.HostInfo\0223\n\017query_partition\030\004 \001(\0132\032.l"
    "lql_proto.QueryPartition\022\024\n\014query_string"
    "\030\005 \001(\014\022)\n\014query_result\030\006 \001(\0132\023.llql_prot"
    "o.RelData\"v\n\007CmdType\022\n\n\006RETURN\020\000\022\016\n\nSTAR"
    "T_HOST\020\001\022\023\n\017START_PARTITION\020\002\022\020\n\014CONNECT"
    "_PEER\020\003\022\024\n\020CONNECT_PEER_ACK\020\004\022\022\n\016EXEC_PA"
    "RTITION\020\005\"\300\001\n\010AdminCmd\022(\n\002ct\030\001 \002(\0162\034.llq"
    "l_proto.AdminCmd.CmdType\022\036\n\003err\030\002 \001(\0132\021."
    "llql_proto.Error\022#\n\006result\030\003 \001(\0132\023.llql_"
    "proto.RelData\"E\n\007CmdType\022\n\n\006RETURN\020\000\022\r\n\t"
    "SHOW_CONF\020\001\022\017\n\013SHOW_SLAVES\020\002\022\016\n\nSHOW_PEE"
    "RS\020\003*-\n\005Magic\022\022\n\nLLQL_MAGIC\020\312\360\371\216\001\022\020\n\014LLQ"
    "L_VERSION\020\001*\204\001\n\013MessageType\022\014\n\010MSG_TEST\020"
    "\000\022\021\n\rMSG_ADMIN_CMD\020\001\022\021\n\rMSG_QUARK_CMD\020\002\022"
    "\020\n\014MSG_LLQL_CMD\020\003\022\014\n\010MSG_DATA\020\004\022\022\n\016MSG_Q"
    "UERY_EXEC\020\005\022\r\n\tMSG_ERROR\020\006B,\n\037com.vitess"
    "edata.llql.llql_protoB\tLLQLQuark", 1552);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "quark.proto", &protobuf_RegisterTypes);
  ColData::default_instance_ = new ColData();
  RelData::default_instance_ = new RelData();
  QueryPartition::default_instance_ = new QueryPartition();
  QuarkCmd::default_instance_ = new QuarkCmd();
  HostInfo::default_instance_ = new HostInfo();
  LLQLCmd::default_instance_ = new LLQLCmd();
  AdminCmd::default_instance_ = new AdminCmd();
  ColData::default_instance_->InitAsDefaultInstance();
  RelData::default_instance_->InitAsDefaultInstance();
  QueryPartition::default_instance_->InitAsDefaultInstance();
  QuarkCmd::default_instance_->InitAsDefaultInstance();
  HostInfo::default_instance_->InitAsDefaultInstance();
  LLQLCmd::default_instance_->InitAsDefaultInstance();
  AdminCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_quark_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_quark_2eproto {
  StaticDescriptorInitializer_quark_2eproto() {
    protobuf_AddDesc_quark_2eproto();
  }
} static_descriptor_initializer_quark_2eproto_;
const ::google::protobuf::EnumDescriptor* Magic_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Magic_descriptor_;
}
bool Magic_IsValid(int value) {
  switch(value) {
    case 1:
    case 299792458:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ColData::kIsnullFieldNumber;
const int ColData::kBoolvalFieldNumber;
const int ColData::kI32ValFieldNumber;
const int ColData::kI64ValFieldNumber;
const int ColData::kFloatvalFieldNumber;
const int ColData::kDoublevalFieldNumber;
const int ColData::kStrvalFieldNumber;
const int ColData::kBytesvalFieldNumber;
#endif  // !_MSC_VER

ColData::ColData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColData::InitAsDefaultInstance() {
}

ColData::ColData(const ColData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColData::~ColData() {
  SharedDtor();
}

void ColData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColData_descriptor_;
}

const ColData& ColData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quark_2eproto();
  return *default_instance_;
}

ColData* ColData::default_instance_ = NULL;

ColData* ColData::New() const {
  return new ColData;
}

void ColData::Clear() {
  isnull_.Clear();
  boolval_.Clear();
  i32val_.Clear();
  i64val_.Clear();
  floatval_.Clear();
  doubleval_.Clear();
  strval_.Clear();
  bytesval_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool isnull = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isnull:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 8, input, this->mutable_isnull())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_isnull())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_isnull;
        if (input->ExpectTag(16)) goto parse_boolval;
        break;
      }

      // repeated bool boolval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boolval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_boolval())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_boolval())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boolval;
        if (input->ExpectTag(24)) goto parse_i32val;
        break;
      }

      // repeated int32 i32val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_i32val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_i32val())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_i32val())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_i32val;
        if (input->ExpectTag(32)) goto parse_i64val;
        break;
      }

      // repeated int64 i64val = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_i64val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_i64val())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_i64val())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_i64val;
        if (input->ExpectTag(45)) goto parse_floatval;
        break;
      }

      // repeated float floatval = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_floatval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_floatval())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_floatval())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_floatval;
        if (input->ExpectTag(49)) goto parse_doubleval;
        break;
      }

      // repeated double doubleval = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_doubleval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49, input, this->mutable_doubleval())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_doubleval())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_doubleval;
        if (input->ExpectTag(58)) goto parse_strval;
        break;
      }

      // repeated string strval = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strval()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strval(this->strval_size() - 1).data(),
            this->strval(this->strval_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strval;
        if (input->ExpectTag(66)) goto parse_bytesval;
        break;
      }

      // repeated bytes bytesval = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytesval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_bytesval()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_bytesval;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bool isnull = 1;
  for (int i = 0; i < this->isnull_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      1, this->isnull(i), output);
  }

  // repeated bool boolval = 2;
  for (int i = 0; i < this->boolval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->boolval(i), output);
  }

  // repeated int32 i32val = 3;
  for (int i = 0; i < this->i32val_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->i32val(i), output);
  }

  // repeated int64 i64val = 4;
  for (int i = 0; i < this->i64val_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->i64val(i), output);
  }

  // repeated float floatval = 5;
  for (int i = 0; i < this->floatval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->floatval(i), output);
  }

  // repeated double doubleval = 6;
  for (int i = 0; i < this->doubleval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->doubleval(i), output);
  }

  // repeated string strval = 7;
  for (int i = 0; i < this->strval_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->strval(i).data(), this->strval(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->strval(i), output);
  }

  // repeated bytes bytesval = 8;
  for (int i = 0; i < this->bytesval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->bytesval(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bool isnull = 1;
  for (int i = 0; i < this->isnull_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(1, this->isnull(i), target);
  }

  // repeated bool boolval = 2;
  for (int i = 0; i < this->boolval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->boolval(i), target);
  }

  // repeated int32 i32val = 3;
  for (int i = 0; i < this->i32val_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->i32val(i), target);
  }

  // repeated int64 i64val = 4;
  for (int i = 0; i < this->i64val_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->i64val(i), target);
  }

  // repeated float floatval = 5;
  for (int i = 0; i < this->floatval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->floatval(i), target);
  }

  // repeated double doubleval = 6;
  for (int i = 0; i < this->doubleval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(6, this->doubleval(i), target);
  }

  // repeated string strval = 7;
  for (int i = 0; i < this->strval_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strval(i).data(), this->strval(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->strval(i), target);
  }

  // repeated bytes bytesval = 8;
  for (int i = 0; i < this->bytesval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->bytesval(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColData::ByteSize() const {
  int total_size = 0;

  // repeated bool isnull = 1;
  {
    int data_size = 0;
    data_size = 1 * this->isnull_size();
    total_size += 1 * this->isnull_size() + data_size;
  }

  // repeated bool boolval = 2;
  {
    int data_size = 0;
    data_size = 1 * this->boolval_size();
    total_size += 1 * this->boolval_size() + data_size;
  }

  // repeated int32 i32val = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->i32val_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->i32val(i));
    }
    total_size += 1 * this->i32val_size() + data_size;
  }

  // repeated int64 i64val = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->i64val_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->i64val(i));
    }
    total_size += 1 * this->i64val_size() + data_size;
  }

  // repeated float floatval = 5;
  {
    int data_size = 0;
    data_size = 4 * this->floatval_size();
    total_size += 1 * this->floatval_size() + data_size;
  }

  // repeated double doubleval = 6;
  {
    int data_size = 0;
    data_size = 8 * this->doubleval_size();
    total_size += 1 * this->doubleval_size() + data_size;
  }

  // repeated string strval = 7;
  total_size += 1 * this->strval_size();
  for (int i = 0; i < this->strval_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strval(i));
  }

  // repeated bytes bytesval = 8;
  total_size += 1 * this->bytesval_size();
  for (int i = 0; i < this->bytesval_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->bytesval(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColData::MergeFrom(const ColData& from) {
  GOOGLE_CHECK_NE(&from, this);
  isnull_.MergeFrom(from.isnull_);
  boolval_.MergeFrom(from.boolval_);
  i32val_.MergeFrom(from.i32val_);
  i64val_.MergeFrom(from.i64val_);
  floatval_.MergeFrom(from.floatval_);
  doubleval_.MergeFrom(from.doubleval_);
  strval_.MergeFrom(from.strval_);
  bytesval_.MergeFrom(from.bytesval_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColData::CopyFrom(const ColData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColData::IsInitialized() const {

  return true;
}

void ColData::Swap(ColData* other) {
  if (other != this) {
    isnull_.Swap(&other->isnull_);
    boolval_.Swap(&other->boolval_);
    i32val_.Swap(&other->i32val_);
    i64val_.Swap(&other->i64val_);
    floatval_.Swap(&other->floatval_);
    doubleval_.Swap(&other->doubleval_);
    strval_.Swap(&other->strval_);
    bytesval_.Swap(&other->bytesval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColData_descriptor_;
  metadata.reflection = ColData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelData::kLastFieldNumber;
const int RelData::kNtupleFieldNumber;
const int RelData::kNcolFieldNumber;
const int RelData::kColsFieldNumber;
#endif  // !_MSC_VER

RelData::RelData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RelData::InitAsDefaultInstance() {
}

RelData::RelData(const RelData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RelData::SharedCtor() {
  _cached_size_ = 0;
  last_ = false;
  ntuple_ = 0;
  ncol_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelData::~RelData() {
  SharedDtor();
}

void RelData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelData_descriptor_;
}

const RelData& RelData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quark_2eproto();
  return *default_instance_;
}

RelData* RelData::default_instance_ = NULL;

RelData* RelData::New() const {
  return new RelData;
}

void RelData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_ = false;
    ntuple_ = 0;
    ncol_ = 0;
  }
  cols_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool last = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_)));
          set_has_last();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ntuple;
        break;
      }

      // required int32 ntuple = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ntuple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntuple_)));
          set_has_ntuple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ncol;
        break;
      }

      // required int32 ncol = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ncol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncol_)));
          set_has_ncol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cols;
        break;
      }

      // repeated .llql_proto.ColData cols = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cols()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cols;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RelData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool last = 1;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->last(), output);
  }

  // required int32 ntuple = 2;
  if (has_ntuple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ntuple(), output);
  }

  // required int32 ncol = 3;
  if (has_ncol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ncol(), output);
  }

  // repeated .llql_proto.ColData cols = 4;
  for (int i = 0; i < this->cols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cols(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RelData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool last = 1;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->last(), target);
  }

  // required int32 ntuple = 2;
  if (has_ntuple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ntuple(), target);
  }

  // required int32 ncol = 3;
  if (has_ncol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ncol(), target);
  }

  // repeated .llql_proto.ColData cols = 4;
  for (int i = 0; i < this->cols_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cols(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RelData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool last = 1;
    if (has_last()) {
      total_size += 1 + 1;
    }

    // required int32 ntuple = 2;
    if (has_ntuple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntuple());
    }

    // required int32 ncol = 3;
    if (has_ncol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncol());
    }

  }
  // repeated .llql_proto.ColData cols = 4;
  total_size += 1 * this->cols_size();
  for (int i = 0; i < this->cols_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cols(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelData::MergeFrom(const RelData& from) {
  GOOGLE_CHECK_NE(&from, this);
  cols_.MergeFrom(from.cols_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last()) {
      set_last(from.last());
    }
    if (from.has_ntuple()) {
      set_ntuple(from.ntuple());
    }
    if (from.has_ncol()) {
      set_ncol(from.ncol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelData::CopyFrom(const RelData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RelData::Swap(RelData* other) {
  if (other != this) {
    std::swap(last_, other->last_);
    std::swap(ntuple_, other->ntuple_);
    std::swap(ncol_, other->ncol_);
    cols_.Swap(&other->cols_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelData_descriptor_;
  metadata.reflection = RelData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryPartition::kQueryIdFieldNumber;
const int QueryPartition::kStageIdFieldNumber;
const int QueryPartition::kPartitionFieldNumber;
const int QueryPartition::kTotalPartitionFieldNumber;
#endif  // !_MSC_VER

QueryPartition::QueryPartition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryPartition::InitAsDefaultInstance() {
}

QueryPartition::QueryPartition(const QueryPartition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryPartition::SharedCtor() {
  _cached_size_ = 0;
  query_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stage_id_ = 0;
  partition_ = 0;
  total_partition_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryPartition::~QueryPartition() {
  SharedDtor();
}

void QueryPartition::SharedDtor() {
  if (query_id_ != &::google::protobuf::internal::kEmptyString) {
    delete query_id_;
  }
  if (this != default_instance_) {
  }
}

void QueryPartition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPartition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPartition_descriptor_;
}

const QueryPartition& QueryPartition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quark_2eproto();
  return *default_instance_;
}

QueryPartition* QueryPartition::default_instance_ = NULL;

QueryPartition* QueryPartition::New() const {
  return new QueryPartition;
}

void QueryPartition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_query_id()) {
      if (query_id_ != &::google::protobuf::internal::kEmptyString) {
        query_id_->clear();
      }
    }
    stage_id_ = 0;
    partition_ = 0;
    total_partition_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryPartition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->query_id().data(), this->query_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stage_id;
        break;
      }

      // required int32 stage_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_partition;
        break;
      }

      // required int32 partition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_)));
          set_has_partition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_partition;
        break;
      }

      // required int32 total_partition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_partition_)));
          set_has_total_partition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryPartition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string query_id = 1;
  if (has_query_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query_id().data(), this->query_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->query_id(), output);
  }

  // required int32 stage_id = 2;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stage_id(), output);
  }

  // required int32 partition = 3;
  if (has_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->partition(), output);
  }

  // required int32 total_partition = 4;
  if (has_total_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_partition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryPartition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string query_id = 1;
  if (has_query_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query_id().data(), this->query_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query_id(), target);
  }

  // required int32 stage_id = 2;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stage_id(), target);
  }

  // required int32 partition = 3;
  if (has_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->partition(), target);
  }

  // required int32 total_partition = 4;
  if (has_total_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_partition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryPartition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string query_id = 1;
    if (has_query_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_id());
    }

    // required int32 stage_id = 2;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

    // required int32 partition = 3;
    if (has_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partition());
    }

    // required int32 total_partition = 4;
    if (has_total_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_partition());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPartition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryPartition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryPartition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryPartition::MergeFrom(const QueryPartition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query_id()) {
      set_query_id(from.query_id());
    }
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
    if (from.has_partition()) {
      set_partition(from.partition());
    }
    if (from.has_total_partition()) {
      set_total_partition(from.total_partition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryPartition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPartition::CopyFrom(const QueryPartition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPartition::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void QueryPartition::Swap(QueryPartition* other) {
  if (other != this) {
    std::swap(query_id_, other->query_id_);
    std::swap(stage_id_, other->stage_id_);
    std::swap(partition_, other->partition_);
    std::swap(total_partition_, other->total_partition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryPartition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPartition_descriptor_;
  metadata.reflection = QueryPartition_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* QuarkCmd_CmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuarkCmd_CmdType_descriptor_;
}
bool QuarkCmd_CmdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const QuarkCmd_CmdType QuarkCmd::RETURN;
const QuarkCmd_CmdType QuarkCmd::REGISTER_QUERY;
const QuarkCmd_CmdType QuarkCmd::EXECUTE_QUERY;
const QuarkCmd_CmdType QuarkCmd::STOP_QUERY;
const QuarkCmd_CmdType QuarkCmd::CmdType_MIN;
const QuarkCmd_CmdType QuarkCmd::CmdType_MAX;
const int QuarkCmd::CmdType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int QuarkCmd::kCtFieldNumber;
const int QuarkCmd::kErrFieldNumber;
const int QuarkCmd::kQueryIdFieldNumber;
const int QuarkCmd::kQueryFieldNumber;
const int QuarkCmd::kQueryPartitionFieldNumber;
const int QuarkCmd::kQueryResultFieldNumber;
#endif  // !_MSC_VER

QuarkCmd::QuarkCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuarkCmd::InitAsDefaultInstance() {
  err_ = const_cast< ::llql_proto::Error*>(&::llql_proto::Error::default_instance());
  query_partition_ = const_cast< ::llql_proto::QueryPartition*>(&::llql_proto::QueryPartition::default_instance());
  query_result_ = const_cast< ::llql_proto::RelData*>(&::llql_proto::RelData::default_instance());
}

QuarkCmd::QuarkCmd(const QuarkCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuarkCmd::SharedCtor() {
  _cached_size_ = 0;
  ct_ = 0;
  err_ = NULL;
  query_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  query_partition_ = NULL;
  query_result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuarkCmd::~QuarkCmd() {
  SharedDtor();
}

void QuarkCmd::SharedDtor() {
  if (query_id_ != &::google::protobuf::internal::kEmptyString) {
    delete query_id_;
  }
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    delete query_;
  }
  if (this != default_instance_) {
    delete err_;
    delete query_partition_;
    delete query_result_;
  }
}

void QuarkCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuarkCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuarkCmd_descriptor_;
}

const QuarkCmd& QuarkCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quark_2eproto();
  return *default_instance_;
}

QuarkCmd* QuarkCmd::default_instance_ = NULL;

QuarkCmd* QuarkCmd::New() const {
  return new QuarkCmd;
}

void QuarkCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ct_ = 0;
    if (has_err()) {
      if (err_ != NULL) err_->::llql_proto::Error::Clear();
    }
    if (has_query_id()) {
      if (query_id_ != &::google::protobuf::internal::kEmptyString) {
        query_id_->clear();
      }
    }
    if (has_query()) {
      if (query_ != &::google::protobuf::internal::kEmptyString) {
        query_->clear();
      }
    }
    if (has_query_partition()) {
      if (query_partition_ != NULL) query_partition_->::llql_proto::QueryPartition::Clear();
    }
    if (has_query_result()) {
      if (query_result_ != NULL) query_result_->::llql_proto::RelData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuarkCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .llql_proto.QuarkCmd.CmdType ct = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llql_proto::QuarkCmd_CmdType_IsValid(value)) {
            set_ct(static_cast< ::llql_proto::QuarkCmd_CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_err;
        break;
      }

      // optional .llql_proto.Error err = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_err()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_query_id;
        break;
      }

      // optional string query_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->query_id().data(), this->query_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_query;
        break;
      }

      // optional bytes query = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_query_partition;
        break;
      }

      // optional .llql_proto.QueryPartition query_partition = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query_partition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query_partition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_query_result;
        break;
      }

      // optional .llql_proto.RelData query_result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuarkCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .llql_proto.QuarkCmd.CmdType ct = 1;
  if (has_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ct(), output);
  }

  // optional .llql_proto.Error err = 2;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->err(), output);
  }

  // optional string query_id = 3;
  if (has_query_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query_id().data(), this->query_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->query_id(), output);
  }

  // optional bytes query = 4;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->query(), output);
  }

  // optional .llql_proto.QueryPartition query_partition = 5;
  if (has_query_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->query_partition(), output);
  }

  // optional .llql_proto.RelData query_result = 6;
  if (has_query_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->query_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuarkCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .llql_proto.QuarkCmd.CmdType ct = 1;
  if (has_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ct(), target);
  }

  // optional .llql_proto.Error err = 2;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->err(), target);
  }

  // optional string query_id = 3;
  if (has_query_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query_id().data(), this->query_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->query_id(), target);
  }

  // optional bytes query = 4;
  if (has_query()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->query(), target);
  }

  // optional .llql_proto.QueryPartition query_partition = 5;
  if (has_query_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->query_partition(), target);
  }

  // optional .llql_proto.RelData query_result = 6;
  if (has_query_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->query_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuarkCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .llql_proto.QuarkCmd.CmdType ct = 1;
    if (has_ct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ct());
    }

    // optional .llql_proto.Error err = 2;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->err());
    }

    // optional string query_id = 3;
    if (has_query_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_id());
    }

    // optional bytes query = 4;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->query());
    }

    // optional .llql_proto.QueryPartition query_partition = 5;
    if (has_query_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query_partition());
    }

    // optional .llql_proto.RelData query_result = 6;
    if (has_query_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuarkCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuarkCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuarkCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuarkCmd::MergeFrom(const QuarkCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ct()) {
      set_ct(from.ct());
    }
    if (from.has_err()) {
      mutable_err()->::llql_proto::Error::MergeFrom(from.err());
    }
    if (from.has_query_id()) {
      set_query_id(from.query_id());
    }
    if (from.has_query()) {
      set_query(from.query());
    }
    if (from.has_query_partition()) {
      mutable_query_partition()->::llql_proto::QueryPartition::MergeFrom(from.query_partition());
    }
    if (from.has_query_result()) {
      mutable_query_result()->::llql_proto::RelData::MergeFrom(from.query_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuarkCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuarkCmd::CopyFrom(const QuarkCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuarkCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_err()) {
    if (!this->err().IsInitialized()) return false;
  }
  if (has_query_partition()) {
    if (!this->query_partition().IsInitialized()) return false;
  }
  if (has_query_result()) {
    if (!this->query_result().IsInitialized()) return false;
  }
  return true;
}

void QuarkCmd::Swap(QuarkCmd* other) {
  if (other != this) {
    std::swap(ct_, other->ct_);
    std::swap(err_, other->err_);
    std::swap(query_id_, other->query_id_);
    std::swap(query_, other->query_);
    std::swap(query_partition_, other->query_partition_);
    std::swap(query_result_, other->query_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuarkCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuarkCmd_descriptor_;
  metadata.reflection = QuarkCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HostInfo::kHostIdFieldNumber;
const int HostInfo::kHostGenFieldNumber;
const int HostInfo::kHostnameFieldNumber;
const int HostInfo::kListenPortFieldNumber;
#endif  // !_MSC_VER

HostInfo::HostInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HostInfo::InitAsDefaultInstance() {
}

HostInfo::HostInfo(const HostInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HostInfo::SharedCtor() {
  _cached_size_ = 0;
  host_id_ = 0;
  host_gen_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  listen_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HostInfo::~HostInfo() {
  SharedDtor();
}

void HostInfo::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void HostInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HostInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HostInfo_descriptor_;
}

const HostInfo& HostInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quark_2eproto();
  return *default_instance_;
}

HostInfo* HostInfo::default_instance_ = NULL;

HostInfo* HostInfo::New() const {
  return new HostInfo;
}

void HostInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    host_id_ = 0;
    host_gen_ = 0;
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    listen_port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HostInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 host_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &host_id_)));
          set_has_host_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_host_gen;
        break;
      }

      // required int32 host_gen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_host_gen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &host_gen_)));
          set_has_host_gen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hostname;
        break;
      }

      // required string hostname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_listen_port;
        break;
      }

      // required int32 listen_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listen_port_)));
          set_has_listen_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HostInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 host_id = 1;
  if (has_host_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->host_id(), output);
  }

  // required int32 host_gen = 2;
  if (has_host_gen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->host_gen(), output);
  }

  // required string hostname = 3;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->hostname(), output);
  }

  // required int32 listen_port = 4;
  if (has_listen_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->listen_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HostInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 host_id = 1;
  if (has_host_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->host_id(), target);
  }

  // required int32 host_gen = 2;
  if (has_host_gen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->host_gen(), target);
  }

  // required string hostname = 3;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hostname(), target);
  }

  // required int32 listen_port = 4;
  if (has_listen_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->listen_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HostInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 host_id = 1;
    if (has_host_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->host_id());
    }

    // required int32 host_gen = 2;
    if (has_host_gen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->host_gen());
    }

    // required string hostname = 3;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // required int32 listen_port = 4;
    if (has_listen_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listen_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HostInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HostInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HostInfo::MergeFrom(const HostInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host_id()) {
      set_host_id(from.host_id());
    }
    if (from.has_host_gen()) {
      set_host_gen(from.host_gen());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_listen_port()) {
      set_listen_port(from.listen_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HostInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostInfo::CopyFrom(const HostInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void HostInfo::Swap(HostInfo* other) {
  if (other != this) {
    std::swap(host_id_, other->host_id_);
    std::swap(host_gen_, other->host_gen_);
    std::swap(hostname_, other->hostname_);
    std::swap(listen_port_, other->listen_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HostInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HostInfo_descriptor_;
  metadata.reflection = HostInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LLQLCmd_CmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LLQLCmd_CmdType_descriptor_;
}
bool LLQLCmd_CmdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LLQLCmd_CmdType LLQLCmd::RETURN;
const LLQLCmd_CmdType LLQLCmd::START_HOST;
const LLQLCmd_CmdType LLQLCmd::START_PARTITION;
const LLQLCmd_CmdType LLQLCmd::CONNECT_PEER;
const LLQLCmd_CmdType LLQLCmd::CONNECT_PEER_ACK;
const LLQLCmd_CmdType LLQLCmd::EXEC_PARTITION;
const LLQLCmd_CmdType LLQLCmd::CmdType_MIN;
const LLQLCmd_CmdType LLQLCmd::CmdType_MAX;
const int LLQLCmd::CmdType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LLQLCmd::kCtFieldNumber;
const int LLQLCmd::kErrFieldNumber;
const int LLQLCmd::kHostInfoFieldNumber;
const int LLQLCmd::kQueryPartitionFieldNumber;
const int LLQLCmd::kQueryStringFieldNumber;
const int LLQLCmd::kQueryResultFieldNumber;
#endif  // !_MSC_VER

LLQLCmd::LLQLCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LLQLCmd::InitAsDefaultInstance() {
  err_ = const_cast< ::llql_proto::Error*>(&::llql_proto::Error::default_instance());
  query_partition_ = const_cast< ::llql_proto::QueryPartition*>(&::llql_proto::QueryPartition::default_instance());
  query_result_ = const_cast< ::llql_proto::RelData*>(&::llql_proto::RelData::default_instance());
}

LLQLCmd::LLQLCmd(const LLQLCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LLQLCmd::SharedCtor() {
  _cached_size_ = 0;
  ct_ = 0;
  err_ = NULL;
  query_partition_ = NULL;
  query_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  query_result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LLQLCmd::~LLQLCmd() {
  SharedDtor();
}

void LLQLCmd::SharedDtor() {
  if (query_string_ != &::google::protobuf::internal::kEmptyString) {
    delete query_string_;
  }
  if (this != default_instance_) {
    delete err_;
    delete query_partition_;
    delete query_result_;
  }
}

void LLQLCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LLQLCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LLQLCmd_descriptor_;
}

const LLQLCmd& LLQLCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quark_2eproto();
  return *default_instance_;
}

LLQLCmd* LLQLCmd::default_instance_ = NULL;

LLQLCmd* LLQLCmd::New() const {
  return new LLQLCmd;
}

void LLQLCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ct_ = 0;
    if (has_err()) {
      if (err_ != NULL) err_->::llql_proto::Error::Clear();
    }
    if (has_query_partition()) {
      if (query_partition_ != NULL) query_partition_->::llql_proto::QueryPartition::Clear();
    }
    if (has_query_string()) {
      if (query_string_ != &::google::protobuf::internal::kEmptyString) {
        query_string_->clear();
      }
    }
    if (has_query_result()) {
      if (query_result_ != NULL) query_result_->::llql_proto::RelData::Clear();
    }
  }
  host_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LLQLCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .llql_proto.LLQLCmd.CmdType ct = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llql_proto::LLQLCmd_CmdType_IsValid(value)) {
            set_ct(static_cast< ::llql_proto::LLQLCmd_CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_err;
        break;
      }

      // optional .llql_proto.Error err = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_err()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_host_info;
        break;
      }

      // repeated .llql_proto.HostInfo host_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_host_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_host_info;
        if (input->ExpectTag(34)) goto parse_query_partition;
        break;
      }

      // optional .llql_proto.QueryPartition query_partition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query_partition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query_partition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_query_string;
        break;
      }

      // optional bytes query_string = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_query_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_query_result;
        break;
      }

      // optional .llql_proto.RelData query_result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LLQLCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .llql_proto.LLQLCmd.CmdType ct = 1;
  if (has_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ct(), output);
  }

  // optional .llql_proto.Error err = 2;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->err(), output);
  }

  // repeated .llql_proto.HostInfo host_info = 3;
  for (int i = 0; i < this->host_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->host_info(i), output);
  }

  // optional .llql_proto.QueryPartition query_partition = 4;
  if (has_query_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->query_partition(), output);
  }

  // optional bytes query_string = 5;
  if (has_query_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->query_string(), output);
  }

  // optional .llql_proto.RelData query_result = 6;
  if (has_query_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->query_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LLQLCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .llql_proto.LLQLCmd.CmdType ct = 1;
  if (has_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ct(), target);
  }

  // optional .llql_proto.Error err = 2;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->err(), target);
  }

  // repeated .llql_proto.HostInfo host_info = 3;
  for (int i = 0; i < this->host_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->host_info(i), target);
  }

  // optional .llql_proto.QueryPartition query_partition = 4;
  if (has_query_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->query_partition(), target);
  }

  // optional bytes query_string = 5;
  if (has_query_string()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->query_string(), target);
  }

  // optional .llql_proto.RelData query_result = 6;
  if (has_query_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->query_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LLQLCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .llql_proto.LLQLCmd.CmdType ct = 1;
    if (has_ct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ct());
    }

    // optional .llql_proto.Error err = 2;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->err());
    }

    // optional .llql_proto.QueryPartition query_partition = 4;
    if (has_query_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query_partition());
    }

    // optional bytes query_string = 5;
    if (has_query_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->query_string());
    }

    // optional .llql_proto.RelData query_result = 6;
    if (has_query_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query_result());
    }

  }
  // repeated .llql_proto.HostInfo host_info = 3;
  total_size += 1 * this->host_info_size();
  for (int i = 0; i < this->host_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->host_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LLQLCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LLQLCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LLQLCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LLQLCmd::MergeFrom(const LLQLCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  host_info_.MergeFrom(from.host_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ct()) {
      set_ct(from.ct());
    }
    if (from.has_err()) {
      mutable_err()->::llql_proto::Error::MergeFrom(from.err());
    }
    if (from.has_query_partition()) {
      mutable_query_partition()->::llql_proto::QueryPartition::MergeFrom(from.query_partition());
    }
    if (from.has_query_string()) {
      set_query_string(from.query_string());
    }
    if (from.has_query_result()) {
      mutable_query_result()->::llql_proto::RelData::MergeFrom(from.query_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LLQLCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LLQLCmd::CopyFrom(const LLQLCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LLQLCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_err()) {
    if (!this->err().IsInitialized()) return false;
  }
  for (int i = 0; i < host_info_size(); i++) {
    if (!this->host_info(i).IsInitialized()) return false;
  }
  if (has_query_partition()) {
    if (!this->query_partition().IsInitialized()) return false;
  }
  if (has_query_result()) {
    if (!this->query_result().IsInitialized()) return false;
  }
  return true;
}

void LLQLCmd::Swap(LLQLCmd* other) {
  if (other != this) {
    std::swap(ct_, other->ct_);
    std::swap(err_, other->err_);
    host_info_.Swap(&other->host_info_);
    std::swap(query_partition_, other->query_partition_);
    std::swap(query_string_, other->query_string_);
    std::swap(query_result_, other->query_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LLQLCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LLQLCmd_descriptor_;
  metadata.reflection = LLQLCmd_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AdminCmd_CmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminCmd_CmdType_descriptor_;
}
bool AdminCmd_CmdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AdminCmd_CmdType AdminCmd::RETURN;
const AdminCmd_CmdType AdminCmd::SHOW_CONF;
const AdminCmd_CmdType AdminCmd::SHOW_SLAVES;
const AdminCmd_CmdType AdminCmd::SHOW_PEERS;
const AdminCmd_CmdType AdminCmd::CmdType_MIN;
const AdminCmd_CmdType AdminCmd::CmdType_MAX;
const int AdminCmd::CmdType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AdminCmd::kCtFieldNumber;
const int AdminCmd::kErrFieldNumber;
const int AdminCmd::kResultFieldNumber;
#endif  // !_MSC_VER

AdminCmd::AdminCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdminCmd::InitAsDefaultInstance() {
  err_ = const_cast< ::llql_proto::Error*>(&::llql_proto::Error::default_instance());
  result_ = const_cast< ::llql_proto::RelData*>(&::llql_proto::RelData::default_instance());
}

AdminCmd::AdminCmd(const AdminCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdminCmd::SharedCtor() {
  _cached_size_ = 0;
  ct_ = 0;
  err_ = NULL;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdminCmd::~AdminCmd() {
  SharedDtor();
}

void AdminCmd::SharedDtor() {
  if (this != default_instance_) {
    delete err_;
    delete result_;
  }
}

void AdminCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdminCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminCmd_descriptor_;
}

const AdminCmd& AdminCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quark_2eproto();
  return *default_instance_;
}

AdminCmd* AdminCmd::default_instance_ = NULL;

AdminCmd* AdminCmd::New() const {
  return new AdminCmd;
}

void AdminCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ct_ = 0;
    if (has_err()) {
      if (err_ != NULL) err_->::llql_proto::Error::Clear();
    }
    if (has_result()) {
      if (result_ != NULL) result_->::llql_proto::RelData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdminCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .llql_proto.AdminCmd.CmdType ct = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llql_proto::AdminCmd_CmdType_IsValid(value)) {
            set_ct(static_cast< ::llql_proto::AdminCmd_CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_err;
        break;
      }

      // optional .llql_proto.Error err = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_err()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // optional .llql_proto.RelData result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdminCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .llql_proto.AdminCmd.CmdType ct = 1;
  if (has_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ct(), output);
  }

  // optional .llql_proto.Error err = 2;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->err(), output);
  }

  // optional .llql_proto.RelData result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdminCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .llql_proto.AdminCmd.CmdType ct = 1;
  if (has_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ct(), target);
  }

  // optional .llql_proto.Error err = 2;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->err(), target);
  }

  // optional .llql_proto.RelData result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdminCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .llql_proto.AdminCmd.CmdType ct = 1;
    if (has_ct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ct());
    }

    // optional .llql_proto.Error err = 2;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->err());
    }

    // optional .llql_proto.RelData result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdminCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdminCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdminCmd::MergeFrom(const AdminCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ct()) {
      set_ct(from.ct());
    }
    if (from.has_err()) {
      mutable_err()->::llql_proto::Error::MergeFrom(from.err());
    }
    if (from.has_result()) {
      mutable_result()->::llql_proto::RelData::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdminCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminCmd::CopyFrom(const AdminCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_err()) {
    if (!this->err().IsInitialized()) return false;
  }
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void AdminCmd::Swap(AdminCmd* other) {
  if (other != this) {
    std::swap(ct_, other->ct_);
    std::swap(err_, other->err_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdminCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdminCmd_descriptor_;
  metadata.reflection = AdminCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llql_proto

// @@protoc_insertion_point(global_scope)
