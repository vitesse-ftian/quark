// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace llql_proto {

namespace {

const ::google::protobuf::Descriptor* DataType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataType_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataType_TypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataType_TypeInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataType_BuiltinType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Schema_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Schema_reflection_ = NULL;
const ::google::protobuf::Descriptor* Schema_Col_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Schema_Col_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_2eproto() {
  protobuf_AddDesc_data_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data.proto");
  GOOGLE_CHECK(file != NULL);
  DataType_descriptor_ = file->message_type(0);
  static const int DataType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataType, type_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataType, type_info_native_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataType, elem_types_),
  };
  DataType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataType_descriptor_,
      DataType::default_instance_,
      DataType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataType));
  DataType_TypeInfo_descriptor_ = DataType_descriptor_->nested_type(0);
  static const int DataType_TypeInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataType_TypeInfo, ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataType_TypeInfo, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataType_TypeInfo, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataType_TypeInfo, align_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataType_TypeInfo, opt1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataType_TypeInfo, opt2_),
  };
  DataType_TypeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataType_TypeInfo_descriptor_,
      DataType_TypeInfo::default_instance_,
      DataType_TypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataType_TypeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataType_TypeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataType_TypeInfo));
  DataType_BuiltinType_descriptor_ = DataType_descriptor_->enum_type(0);
  Schema_descriptor_ = file->message_type(1);
  static const int Schema_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, columns_),
  };
  Schema_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Schema_descriptor_,
      Schema::default_instance_,
      Schema_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Schema));
  Schema_Col_descriptor_ = Schema_descriptor_->nested_type(0);
  static const int Schema_Col_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema_Col, col_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema_Col, nullable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema_Col, name_),
  };
  Schema_Col_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Schema_Col_descriptor_,
      Schema_Col::default_instance_,
      Schema_Col_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema_Col, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schema_Col, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Schema_Col));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataType_descriptor_, &DataType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataType_TypeInfo_descriptor_, &DataType_TypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Schema_descriptor_, &Schema::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Schema_Col_descriptor_, &Schema_Col::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_2eproto() {
  delete DataType::default_instance_;
  delete DataType_reflection_;
  delete DataType_TypeInfo::default_instance_;
  delete DataType_TypeInfo_reflection_;
  delete Schema::default_instance_;
  delete Schema_reflection_;
  delete Schema_Col::default_instance_;
  delete Schema_Col_reflection_;
}

void protobuf_AddDesc_data_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::llql_proto::protobuf_AddDesc_ns_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndata.proto\022\nllql_proto\032\010ns.proto\"\212\004\n\010D"
    "ataType\0220\n\ttype_info\030\001 \002(\0132\035.llql_proto."
    "DataType.TypeInfo\0227\n\020type_info_native\030\002 "
    "\001(\0132\035.llql_proto.DataType.TypeInfo\022(\n\nel"
    "em_types\030\003 \003(\0132\024.llql_proto.DataType\032v\n\010"
    "TypeInfo\022!\n\002ns\030\001 \002(\0162\025.llql_proto.Namesp"
    "ace\022\017\n\007type_id\030\002 \002(\005\022\013\n\003len\030\003 \002(\005\022\r\n\005ali"
    "gn\030\004 \002(\005\022\014\n\004opt1\030\005 \001(\005\022\014\n\004opt2\030\006 \001(\005\"\360\001\n"
    "\013BuiltinType\022\013\n\007BOOLEAN\020\001\022\010\n\004INT8\020\n\022\t\n\005I"
    "NT16\020\013\022\t\n\005INT32\020\014\022\t\n\005INT64\020\r\022\n\n\006INT128\020\016"
    "\022\013\n\007FLOAT32\020\024\022\013\n\007FLOAT64\020\025\022\013\n\007NUMERIC\020\036\022"
    "\r\n\tDECIMAL64\020\037\022\016\n\nDECIMAL128\020 \022\010\n\004DATE\020("
    "\022\010\n\004TIME\020)\022\r\n\tTIMESTAMP\020*\022\n\n\006BINARY\0202\022\n\n"
    "\006STRING\0203\022\010\n\004JSON\0204\022\t\n\005ARRAY\020d\022\007\n\003SET\020e\""
    "\206\001\n\006Schema\022\'\n\007columns\030\001 \003(\0132\026.llql_proto"
    ".Schema.Col\032S\n\003Col\022&\n\010col_type\030\001 \002(\0132\024.l"
    "lql_proto.DataType\022\026\n\010nullable\030\002 \002(\010:\004tr"
    "ue\022\014\n\004name\030\003 \001(\tB+\n\037com.vitessedata.llql"
    ".llql_protoB\010LLQLData", 741);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data.proto", &protobuf_RegisterTypes);
  DataType::default_instance_ = new DataType();
  DataType_TypeInfo::default_instance_ = new DataType_TypeInfo();
  Schema::default_instance_ = new Schema();
  Schema_Col::default_instance_ = new Schema_Col();
  DataType::default_instance_->InitAsDefaultInstance();
  DataType_TypeInfo::default_instance_->InitAsDefaultInstance();
  Schema::default_instance_->InitAsDefaultInstance();
  Schema_Col::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_2eproto {
  StaticDescriptorInitializer_data_2eproto() {
    protobuf_AddDesc_data_2eproto();
  }
} static_descriptor_initializer_data_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* DataType_BuiltinType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataType_BuiltinType_descriptor_;
}
bool DataType_BuiltinType_IsValid(int value) {
  switch(value) {
    case 1:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 21:
    case 30:
    case 31:
    case 32:
    case 40:
    case 41:
    case 42:
    case 50:
    case 51:
    case 52:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DataType_BuiltinType DataType::BOOLEAN;
const DataType_BuiltinType DataType::INT8;
const DataType_BuiltinType DataType::INT16;
const DataType_BuiltinType DataType::INT32;
const DataType_BuiltinType DataType::INT64;
const DataType_BuiltinType DataType::INT128;
const DataType_BuiltinType DataType::FLOAT32;
const DataType_BuiltinType DataType::FLOAT64;
const DataType_BuiltinType DataType::NUMERIC;
const DataType_BuiltinType DataType::DECIMAL64;
const DataType_BuiltinType DataType::DECIMAL128;
const DataType_BuiltinType DataType::DATE;
const DataType_BuiltinType DataType::TIME;
const DataType_BuiltinType DataType::TIMESTAMP;
const DataType_BuiltinType DataType::BINARY;
const DataType_BuiltinType DataType::STRING;
const DataType_BuiltinType DataType::JSON;
const DataType_BuiltinType DataType::ARRAY;
const DataType_BuiltinType DataType::SET;
const DataType_BuiltinType DataType::BuiltinType_MIN;
const DataType_BuiltinType DataType::BuiltinType_MAX;
const int DataType::BuiltinType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DataType_TypeInfo::kNsFieldNumber;
const int DataType_TypeInfo::kTypeIdFieldNumber;
const int DataType_TypeInfo::kLenFieldNumber;
const int DataType_TypeInfo::kAlignFieldNumber;
const int DataType_TypeInfo::kOpt1FieldNumber;
const int DataType_TypeInfo::kOpt2FieldNumber;
#endif  // !_MSC_VER

DataType_TypeInfo::DataType_TypeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataType_TypeInfo::InitAsDefaultInstance() {
}

DataType_TypeInfo::DataType_TypeInfo(const DataType_TypeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataType_TypeInfo::SharedCtor() {
  _cached_size_ = 0;
  ns_ = 0;
  type_id_ = 0;
  len_ = 0;
  align_ = 0;
  opt1_ = 0;
  opt2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataType_TypeInfo::~DataType_TypeInfo() {
  SharedDtor();
}

void DataType_TypeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataType_TypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataType_TypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataType_TypeInfo_descriptor_;
}

const DataType_TypeInfo& DataType_TypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

DataType_TypeInfo* DataType_TypeInfo::default_instance_ = NULL;

DataType_TypeInfo* DataType_TypeInfo::New() const {
  return new DataType_TypeInfo;
}

void DataType_TypeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ns_ = 0;
    type_id_ = 0;
    len_ = 0;
    align_ = 0;
    opt1_ = 0;
    opt2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataType_TypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .llql_proto.Namespace ns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llql_proto::Namespace_IsValid(value)) {
            set_ns(static_cast< ::llql_proto::Namespace >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type_id;
        break;
      }

      // required int32 type_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_len;
        break;
      }

      // required int32 len = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_align;
        break;
      }

      // required int32 align = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_align:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &align_)));
          set_has_align();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_opt1;
        break;
      }

      // optional int32 opt1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt1_)));
          set_has_opt1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_opt2;
        break;
      }

      // optional int32 opt2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt2_)));
          set_has_opt2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataType_TypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .llql_proto.Namespace ns = 1;
  if (has_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ns(), output);
  }

  // required int32 type_id = 2;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_id(), output);
  }

  // required int32 len = 3;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->len(), output);
  }

  // required int32 align = 4;
  if (has_align()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->align(), output);
  }

  // optional int32 opt1 = 5;
  if (has_opt1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->opt1(), output);
  }

  // optional int32 opt2 = 6;
  if (has_opt2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->opt2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataType_TypeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .llql_proto.Namespace ns = 1;
  if (has_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ns(), target);
  }

  // required int32 type_id = 2;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_id(), target);
  }

  // required int32 len = 3;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->len(), target);
  }

  // required int32 align = 4;
  if (has_align()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->align(), target);
  }

  // optional int32 opt1 = 5;
  if (has_opt1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->opt1(), target);
  }

  // optional int32 opt2 = 6;
  if (has_opt2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->opt2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataType_TypeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .llql_proto.Namespace ns = 1;
    if (has_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ns());
    }

    // required int32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // required int32 len = 3;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }

    // required int32 align = 4;
    if (has_align()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->align());
    }

    // optional int32 opt1 = 5;
    if (has_opt1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt1());
    }

    // optional int32 opt2 = 6;
    if (has_opt2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataType_TypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataType_TypeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataType_TypeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataType_TypeInfo::MergeFrom(const DataType_TypeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ns()) {
      set_ns(from.ns());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_align()) {
      set_align(from.align());
    }
    if (from.has_opt1()) {
      set_opt1(from.opt1());
    }
    if (from.has_opt2()) {
      set_opt2(from.opt2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataType_TypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataType_TypeInfo::CopyFrom(const DataType_TypeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataType_TypeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DataType_TypeInfo::Swap(DataType_TypeInfo* other) {
  if (other != this) {
    std::swap(ns_, other->ns_);
    std::swap(type_id_, other->type_id_);
    std::swap(len_, other->len_);
    std::swap(align_, other->align_);
    std::swap(opt1_, other->opt1_);
    std::swap(opt2_, other->opt2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataType_TypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataType_TypeInfo_descriptor_;
  metadata.reflection = DataType_TypeInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DataType::kTypeInfoFieldNumber;
const int DataType::kTypeInfoNativeFieldNumber;
const int DataType::kElemTypesFieldNumber;
#endif  // !_MSC_VER

DataType::DataType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataType::InitAsDefaultInstance() {
  type_info_ = const_cast< ::llql_proto::DataType_TypeInfo*>(&::llql_proto::DataType_TypeInfo::default_instance());
  type_info_native_ = const_cast< ::llql_proto::DataType_TypeInfo*>(&::llql_proto::DataType_TypeInfo::default_instance());
}

DataType::DataType(const DataType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataType::SharedCtor() {
  _cached_size_ = 0;
  type_info_ = NULL;
  type_info_native_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataType::~DataType() {
  SharedDtor();
}

void DataType::SharedDtor() {
  if (this != default_instance_) {
    delete type_info_;
    delete type_info_native_;
  }
}

void DataType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataType_descriptor_;
}

const DataType& DataType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

DataType* DataType::default_instance_ = NULL;

DataType* DataType::New() const {
  return new DataType;
}

void DataType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type_info()) {
      if (type_info_ != NULL) type_info_->::llql_proto::DataType_TypeInfo::Clear();
    }
    if (has_type_info_native()) {
      if (type_info_native_ != NULL) type_info_native_->::llql_proto::DataType_TypeInfo::Clear();
    }
  }
  elem_types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .llql_proto.DataType.TypeInfo type_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type_info_native;
        break;
      }

      // optional .llql_proto.DataType.TypeInfo type_info_native = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_info_native:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type_info_native()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_elem_types;
        break;
      }

      // repeated .llql_proto.DataType elem_types = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elem_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elem_types()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_elem_types;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .llql_proto.DataType.TypeInfo type_info = 1;
  if (has_type_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->type_info(), output);
  }

  // optional .llql_proto.DataType.TypeInfo type_info_native = 2;
  if (has_type_info_native()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->type_info_native(), output);
  }

  // repeated .llql_proto.DataType elem_types = 3;
  for (int i = 0; i < this->elem_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->elem_types(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .llql_proto.DataType.TypeInfo type_info = 1;
  if (has_type_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->type_info(), target);
  }

  // optional .llql_proto.DataType.TypeInfo type_info_native = 2;
  if (has_type_info_native()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->type_info_native(), target);
  }

  // repeated .llql_proto.DataType elem_types = 3;
  for (int i = 0; i < this->elem_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->elem_types(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .llql_proto.DataType.TypeInfo type_info = 1;
    if (has_type_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type_info());
    }

    // optional .llql_proto.DataType.TypeInfo type_info_native = 2;
    if (has_type_info_native()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type_info_native());
    }

  }
  // repeated .llql_proto.DataType elem_types = 3;
  total_size += 1 * this->elem_types_size();
  for (int i = 0; i < this->elem_types_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem_types(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataType::MergeFrom(const DataType& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_types_.MergeFrom(from.elem_types_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_info()) {
      mutable_type_info()->::llql_proto::DataType_TypeInfo::MergeFrom(from.type_info());
    }
    if (from.has_type_info_native()) {
      mutable_type_info_native()->::llql_proto::DataType_TypeInfo::MergeFrom(from.type_info_native());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataType::CopyFrom(const DataType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_type_info()) {
    if (!this->type_info().IsInitialized()) return false;
  }
  if (has_type_info_native()) {
    if (!this->type_info_native().IsInitialized()) return false;
  }
  for (int i = 0; i < elem_types_size(); i++) {
    if (!this->elem_types(i).IsInitialized()) return false;
  }
  return true;
}

void DataType::Swap(DataType* other) {
  if (other != this) {
    std::swap(type_info_, other->type_info_);
    std::swap(type_info_native_, other->type_info_native_);
    elem_types_.Swap(&other->elem_types_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataType_descriptor_;
  metadata.reflection = DataType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Schema_Col::kColTypeFieldNumber;
const int Schema_Col::kNullableFieldNumber;
const int Schema_Col::kNameFieldNumber;
#endif  // !_MSC_VER

Schema_Col::Schema_Col()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Schema_Col::InitAsDefaultInstance() {
  col_type_ = const_cast< ::llql_proto::DataType*>(&::llql_proto::DataType::default_instance());
}

Schema_Col::Schema_Col(const Schema_Col& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Schema_Col::SharedCtor() {
  _cached_size_ = 0;
  col_type_ = NULL;
  nullable_ = true;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Schema_Col::~Schema_Col() {
  SharedDtor();
}

void Schema_Col::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete col_type_;
  }
}

void Schema_Col::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Schema_Col::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Schema_Col_descriptor_;
}

const Schema_Col& Schema_Col::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

Schema_Col* Schema_Col::default_instance_ = NULL;

Schema_Col* Schema_Col::New() const {
  return new Schema_Col;
}

void Schema_Col::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_col_type()) {
      if (col_type_ != NULL) col_type_->::llql_proto::DataType::Clear();
    }
    nullable_ = true;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Schema_Col::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .llql_proto.DataType col_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_col_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nullable;
        break;
      }

      // required bool nullable = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nullable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nullable_)));
          set_has_nullable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Schema_Col::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .llql_proto.DataType col_type = 1;
  if (has_col_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->col_type(), output);
  }

  // required bool nullable = 2 [default = true];
  if (has_nullable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->nullable(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Schema_Col::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .llql_proto.DataType col_type = 1;
  if (has_col_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->col_type(), target);
  }

  // required bool nullable = 2 [default = true];
  if (has_nullable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->nullable(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Schema_Col::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .llql_proto.DataType col_type = 1;
    if (has_col_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->col_type());
    }

    // required bool nullable = 2 [default = true];
    if (has_nullable()) {
      total_size += 1 + 1;
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Schema_Col::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Schema_Col* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Schema_Col*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Schema_Col::MergeFrom(const Schema_Col& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_col_type()) {
      mutable_col_type()->::llql_proto::DataType::MergeFrom(from.col_type());
    }
    if (from.has_nullable()) {
      set_nullable(from.nullable());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Schema_Col::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schema_Col::CopyFrom(const Schema_Col& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schema_Col::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_col_type()) {
    if (!this->col_type().IsInitialized()) return false;
  }
  return true;
}

void Schema_Col::Swap(Schema_Col* other) {
  if (other != this) {
    std::swap(col_type_, other->col_type_);
    std::swap(nullable_, other->nullable_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Schema_Col::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Schema_Col_descriptor_;
  metadata.reflection = Schema_Col_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Schema::kColumnsFieldNumber;
#endif  // !_MSC_VER

Schema::Schema()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Schema::InitAsDefaultInstance() {
}

Schema::Schema(const Schema& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Schema::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Schema::~Schema() {
  SharedDtor();
}

void Schema::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Schema::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Schema::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Schema_descriptor_;
}

const Schema& Schema::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

Schema* Schema::default_instance_ = NULL;

Schema* Schema::New() const {
  return new Schema;
}

void Schema::Clear() {
  columns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Schema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .llql_proto.Schema.Col columns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_columns;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Schema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .llql_proto.Schema.Col columns = 1;
  for (int i = 0; i < this->columns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->columns(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Schema::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .llql_proto.Schema.Col columns = 1;
  for (int i = 0; i < this->columns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->columns(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Schema::ByteSize() const {
  int total_size = 0;

  // repeated .llql_proto.Schema.Col columns = 1;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Schema::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Schema* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Schema*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Schema::MergeFrom(const Schema& from) {
  GOOGLE_CHECK_NE(&from, this);
  columns_.MergeFrom(from.columns_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Schema::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schema::CopyFrom(const Schema& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schema::IsInitialized() const {

  for (int i = 0; i < columns_size(); i++) {
    if (!this->columns(i).IsInitialized()) return false;
  }
  return true;
}

void Schema::Swap(Schema* other) {
  if (other != this) {
    columns_.Swap(&other->columns_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Schema::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Schema_descriptor_;
  metadata.reflection = Schema_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llql_proto

// @@protoc_insertion_point(global_scope)
