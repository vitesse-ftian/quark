// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ns.proto

#ifndef PROTOBUF_ns_2eproto__INCLUDED
#define PROTOBUF_ns_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace llql_proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ns_2eproto();
void protobuf_AssignDesc_ns_2eproto();
void protobuf_ShutdownFile_ns_2eproto();


enum Namespace {
  LLQL = 0,
  Postgres = 1
};
bool Namespace_IsValid(int value);
const Namespace Namespace_MIN = LLQL;
const Namespace Namespace_MAX = Postgres;
const int Namespace_ARRAYSIZE = Namespace_MAX + 1;

const ::google::protobuf::EnumDescriptor* Namespace_descriptor();
inline const ::std::string& Namespace_Name(Namespace value) {
  return ::google::protobuf::internal::NameOfEnum(
    Namespace_descriptor(), value);
}
inline bool Namespace_Parse(
    const ::std::string& name, Namespace* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Namespace>(
    Namespace_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace llql_proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llql_proto::Namespace>() {
  return ::llql_proto::Namespace_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ns_2eproto__INCLUDED
