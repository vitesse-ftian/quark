// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: expr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "expr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace llql_proto {

namespace {

const ::google::protobuf::Descriptor* Expr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Expr_reflection_ = NULL;
const ::google::protobuf::Descriptor* Expr_Const_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Expr_Const_reflection_ = NULL;
const ::google::protobuf::Descriptor* Expr_ColRef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Expr_ColRef_reflection_ = NULL;
const ::google::protobuf::Descriptor* Expr_Func_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Expr_Func_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Expr_Func_BuiltIn_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SortExpr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SortExpr_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_expr_2eproto() {
  protobuf_AddDesc_expr_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "expr.proto");
  GOOGLE_CHECK(file != NULL);
  Expr_descriptor_ = file->message_type(0);
  static const int Expr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, dt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, const_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, colref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, func_),
  };
  Expr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Expr_descriptor_,
      Expr::default_instance_,
      Expr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Expr));
  Expr_Const_descriptor_ = Expr_descriptor_->nested_type(0);
  static const int Expr_Const_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr_Const, is_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr_Const, str_val_),
  };
  Expr_Const_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Expr_Const_descriptor_,
      Expr_Const::default_instance_,
      Expr_Const_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr_Const, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr_Const, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Expr_Const));
  Expr_ColRef_descriptor_ = Expr_descriptor_->nested_type(1);
  static const int Expr_ColRef_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr_ColRef, rel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr_ColRef, col_id_),
  };
  Expr_ColRef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Expr_ColRef_descriptor_,
      Expr_ColRef::default_instance_,
      Expr_ColRef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr_ColRef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr_ColRef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Expr_ColRef));
  Expr_Func_descriptor_ = Expr_descriptor_->nested_type(2);
  static const int Expr_Func_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr_Func, ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr_Func, func_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr_Func, is_volatile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr_Func, is_strict_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr_Func, is_distinct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr_Func, args_),
  };
  Expr_Func_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Expr_Func_descriptor_,
      Expr_Func::default_instance_,
      Expr_Func_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr_Func, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr_Func, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Expr_Func));
  Expr_Func_BuiltIn_descriptor_ = Expr_Func_descriptor_->enum_type(0);
  SortExpr_descriptor_ = file->message_type(1);
  static const int SortExpr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortExpr, expr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortExpr, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortExpr, null_first_),
  };
  SortExpr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SortExpr_descriptor_,
      SortExpr::default_instance_,
      SortExpr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortExpr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortExpr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SortExpr));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_expr_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Expr_descriptor_, &Expr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Expr_Const_descriptor_, &Expr_Const::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Expr_ColRef_descriptor_, &Expr_ColRef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Expr_Func_descriptor_, &Expr_Func::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SortExpr_descriptor_, &SortExpr::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_expr_2eproto() {
  delete Expr::default_instance_;
  delete Expr_reflection_;
  delete Expr_Const::default_instance_;
  delete Expr_Const_reflection_;
  delete Expr_ColRef::default_instance_;
  delete Expr_ColRef_reflection_;
  delete Expr_Func::default_instance_;
  delete Expr_Func_reflection_;
  delete SortExpr::default_instance_;
  delete SortExpr_reflection_;
}

void protobuf_AddDesc_expr_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::llql_proto::protobuf_AddDesc_ns_2eproto();
  ::llql_proto::protobuf_AddDesc_data_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nexpr.proto\022\nllql_proto\032\010ns.proto\032\ndata"
    ".proto\"\334\013\n\004Expr\022 \n\002dt\030\001 \002(\0132\024.llql_proto"
    ".DataType\022)\n\tconst_val\030\002 \001(\0132\026.llql_prot"
    "o.Expr.Const\022\'\n\006colref\030\003 \001(\0132\027.llql_prot"
    "o.Expr.ColRef\022#\n\004func\030\004 \001(\0132\025.llql_proto"
    ".Expr.Func\032)\n\005Const\022\017\n\007is_null\030\001 \002(\010\022\017\n\007"
    "str_val\030\002 \002(\t\032(\n\006ColRef\022\016\n\006rel_id\030\001 \002(\005\022"
    "\016\n\006col_id\030\002 \002(\005\032\343\t\n\004Func\022!\n\002ns\030\001 \002(\0162\025.l"
    "lql_proto.Namespace\022\017\n\007func_id\030\002 \002(\005\022\032\n\013"
    "is_volatile\030\003 \002(\010:\005false\022\027\n\tis_strict\030\004 "
    "\002(\010:\004true\022\032\n\013is_distinct\030\005 \002(\010:\005false\022\036\n"
    "\004args\030\006 \003(\0132\020.llql_proto.Expr\"\265\010\n\007BuiltI"
    "n\022\014\n\010FUNC_ADD\020\001\022\021\n\rFUNC_SUBTRACT\020\002\022\017\n\013FU"
    "NC_UMINUS\020\003\022\021\n\rFUNC_MULTIPLY\020\004\022\017\n\013FUNC_D"
    "IVIDE\020\005\022\022\n\016FUNC_REMAINDER\020\006\022\020\n\014FUNC_BIT_"
    "AND\020\007\022\017\n\013FUNC_BIT_OR\020\010\022\020\n\014FUNC_BIT_XOR\020\t"
    "\022\020\n\014FUNC_BIT_NOT\020\n\022\021\n\014FUNC_COMPARE\020\310\001\022\r\n"
    "\010FUNC_AND\020\311\001\022\014\n\007FUNC_OR\020\312\001\022\r\n\010FUNC_NOT\020\313"
    "\001\022\014\n\007FUNC_EQ\020\314\001\022\014\n\007FUNC_LT\020\315\001\022\014\n\007FUNC_LE"
    "\020\316\001\022\014\n\007FUNC_GT\020\317\001\022\014\n\007FUNC_GE\020\320\001\022\014\n\007FUNC_"
    "NE\020\321\001\022\026\n\021FUNC_REGEXP_MATCH\020\254\002\022\016\n\tFUNC_LI"
    "KE\020\255\002\022\017\n\nFUNC_LOWER\020\256\002\022\017\n\nFUNC_UPPER\020\257\002\022"
    "\025\n\020FUNC_STR_COMPARE\020\260\002\022\026\n\021FUNC_STR_CONTA"
    "INS\020\261\002\022\024\n\017FUNC_START_WITH\020\262\002\022\022\n\rFUNC_END"
    "_WITH\020\263\002\022\023\n\016FUNC_SUBSTRING\020\264\002\022\r\n\010FUNC_AB"
    "S\020\220\003\022\016\n\tFUNC_SQRT\020\221\003\022\016\n\tFUNC_CAST\020\364\003\022\022\n\r"
    "FUNC_COALESCE\020\365\003\022\020\n\013FUNC_ISNULL\020\366\003\022\023\n\016FU"
    "NC_ISNOTNULL\020\367\003\022\r\n\010FUNC_MIN\020\370\003\022\r\n\010FUNC_M"
    "AX\020\371\003\022\014\n\007FUNC_IN\020\372\003\022\014\n\007FUNC_IF\020\373\003\022\016\n\tFUN"
    "C_CASE\020\374\003\022\026\n\020FUNC_EMPTY_ARRAY\020\220\277\005\022\026\n\020FUN"
    "C_ARRAY_INDEX\020\221\277\005\022\024\n\016FUNC_EMPTY_SET\020\364\277\005\022"
    "\025\n\017FUNC_ADD_TO_SET\020\365\277\005\022\020\n\nFUNC_UNION\020\366\277\005"
    "\022\020\n\nFUNC_COUNT\020\367\277\005\022\024\n\016FUNC_GEN_EXPRS\020\274\214\006"
    "\022\025\n\017FUNC_GEN_UNNEST\020\275\214\006\022\017\n\tAGG_COUNT\020\301\204="
    "\022\r\n\007AGG_SUM\020\302\204=\022\r\n\007AGG_MIN\020\303\204=\022\r\n\007AGG_MA"
    "X\020\304\204=\022\r\n\007AGG_AVG\020\305\204=\022\017\n\tAGG_FIRST\020\306\204=\022\016\n"
    "\010AGG_LAST\020\307\204=\022\033\n\025AGG_APPROXIMATE_COUNT\020\321"
    "\303B\022\025\n\017AGG_COLLECT_SET\020\375\220C\022\017\n\tAGG_UNION\020\376"
    "\220C\022\031\n\023AGG_UNION_AND_COUNT\020\377\220C\"L\n\010SortExp"
    "r\022\036\n\004expr\030\001 \002(\0132\020.llql_proto.Expr\022\014\n\004des"
    "c\030\002 \002(\010\022\022\n\nnull_first\030\003 \002(\010B+\n\037com.vites"
    "sedata.llql.llql_protoB\010LLQLExpr", 1672);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "expr.proto", &protobuf_RegisterTypes);
  Expr::default_instance_ = new Expr();
  Expr_Const::default_instance_ = new Expr_Const();
  Expr_ColRef::default_instance_ = new Expr_ColRef();
  Expr_Func::default_instance_ = new Expr_Func();
  SortExpr::default_instance_ = new SortExpr();
  Expr::default_instance_->InitAsDefaultInstance();
  Expr_Const::default_instance_->InitAsDefaultInstance();
  Expr_ColRef::default_instance_->InitAsDefaultInstance();
  Expr_Func::default_instance_->InitAsDefaultInstance();
  SortExpr::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_expr_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_expr_2eproto {
  StaticDescriptorInitializer_expr_2eproto() {
    protobuf_AddDesc_expr_2eproto();
  }
} static_descriptor_initializer_expr_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Expr_Const::kIsNullFieldNumber;
const int Expr_Const::kStrValFieldNumber;
#endif  // !_MSC_VER

Expr_Const::Expr_Const()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Expr_Const::InitAsDefaultInstance() {
}

Expr_Const::Expr_Const(const Expr_Const& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Expr_Const::SharedCtor() {
  _cached_size_ = 0;
  is_null_ = false;
  str_val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Expr_Const::~Expr_Const() {
  SharedDtor();
}

void Expr_Const::SharedDtor() {
  if (str_val_ != &::google::protobuf::internal::kEmptyString) {
    delete str_val_;
  }
  if (this != default_instance_) {
  }
}

void Expr_Const::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Expr_Const::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Expr_Const_descriptor_;
}

const Expr_Const& Expr_Const::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Expr_Const* Expr_Const::default_instance_ = NULL;

Expr_Const* Expr_Const::New() const {
  return new Expr_Const;
}

void Expr_Const::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_null_ = false;
    if (has_str_val()) {
      if (str_val_ != &::google::protobuf::internal::kEmptyString) {
        str_val_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Expr_Const::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_null = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_null_)));
          set_has_is_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str_val;
        break;
      }

      // required string str_val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_val().data(), this->str_val().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Expr_Const::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_null = 1;
  if (has_is_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_null(), output);
  }

  // required string str_val = 2;
  if (has_str_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_val().data(), this->str_val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Expr_Const::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_null = 1;
  if (has_is_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_null(), target);
  }

  // required string str_val = 2;
  if (has_str_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_val().data(), this->str_val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Expr_Const::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_null = 1;
    if (has_is_null()) {
      total_size += 1 + 1;
    }

    // required string str_val = 2;
    if (has_str_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Expr_Const::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Expr_Const* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Expr_Const*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Expr_Const::MergeFrom(const Expr_Const& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_null()) {
      set_is_null(from.is_null());
    }
    if (from.has_str_val()) {
      set_str_val(from.str_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Expr_Const::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expr_Const::CopyFrom(const Expr_Const& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expr_Const::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Expr_Const::Swap(Expr_Const* other) {
  if (other != this) {
    std::swap(is_null_, other->is_null_);
    std::swap(str_val_, other->str_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Expr_Const::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Expr_Const_descriptor_;
  metadata.reflection = Expr_Const_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Expr_ColRef::kRelIdFieldNumber;
const int Expr_ColRef::kColIdFieldNumber;
#endif  // !_MSC_VER

Expr_ColRef::Expr_ColRef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Expr_ColRef::InitAsDefaultInstance() {
}

Expr_ColRef::Expr_ColRef(const Expr_ColRef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Expr_ColRef::SharedCtor() {
  _cached_size_ = 0;
  rel_id_ = 0;
  col_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Expr_ColRef::~Expr_ColRef() {
  SharedDtor();
}

void Expr_ColRef::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Expr_ColRef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Expr_ColRef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Expr_ColRef_descriptor_;
}

const Expr_ColRef& Expr_ColRef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Expr_ColRef* Expr_ColRef::default_instance_ = NULL;

Expr_ColRef* Expr_ColRef::New() const {
  return new Expr_ColRef;
}

void Expr_ColRef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rel_id_ = 0;
    col_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Expr_ColRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rel_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rel_id_)));
          set_has_rel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_col_id;
        break;
      }

      // required int32 col_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_id_)));
          set_has_col_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Expr_ColRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rel_id = 1;
  if (has_rel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rel_id(), output);
  }

  // required int32 col_id = 2;
  if (has_col_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Expr_ColRef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rel_id = 1;
  if (has_rel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rel_id(), target);
  }

  // required int32 col_id = 2;
  if (has_col_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Expr_ColRef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rel_id = 1;
    if (has_rel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rel_id());
    }

    // required int32 col_id = 2;
    if (has_col_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Expr_ColRef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Expr_ColRef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Expr_ColRef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Expr_ColRef::MergeFrom(const Expr_ColRef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rel_id()) {
      set_rel_id(from.rel_id());
    }
    if (from.has_col_id()) {
      set_col_id(from.col_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Expr_ColRef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expr_ColRef::CopyFrom(const Expr_ColRef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expr_ColRef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Expr_ColRef::Swap(Expr_ColRef* other) {
  if (other != this) {
    std::swap(rel_id_, other->rel_id_);
    std::swap(col_id_, other->col_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Expr_ColRef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Expr_ColRef_descriptor_;
  metadata.reflection = Expr_ColRef_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Expr_Func_BuiltIn_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Expr_Func_BuiltIn_descriptor_;
}
bool Expr_Func_BuiltIn_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 400:
    case 401:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 90000:
    case 90001:
    case 90100:
    case 90101:
    case 90102:
    case 90103:
    case 99900:
    case 99901:
    case 1000001:
    case 1000002:
    case 1000003:
    case 1000004:
    case 1000005:
    case 1000006:
    case 1000007:
    case 1090001:
    case 1099901:
    case 1099902:
    case 1099903:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Expr_Func_BuiltIn Expr_Func::FUNC_ADD;
const Expr_Func_BuiltIn Expr_Func::FUNC_SUBTRACT;
const Expr_Func_BuiltIn Expr_Func::FUNC_UMINUS;
const Expr_Func_BuiltIn Expr_Func::FUNC_MULTIPLY;
const Expr_Func_BuiltIn Expr_Func::FUNC_DIVIDE;
const Expr_Func_BuiltIn Expr_Func::FUNC_REMAINDER;
const Expr_Func_BuiltIn Expr_Func::FUNC_BIT_AND;
const Expr_Func_BuiltIn Expr_Func::FUNC_BIT_OR;
const Expr_Func_BuiltIn Expr_Func::FUNC_BIT_XOR;
const Expr_Func_BuiltIn Expr_Func::FUNC_BIT_NOT;
const Expr_Func_BuiltIn Expr_Func::FUNC_COMPARE;
const Expr_Func_BuiltIn Expr_Func::FUNC_AND;
const Expr_Func_BuiltIn Expr_Func::FUNC_OR;
const Expr_Func_BuiltIn Expr_Func::FUNC_NOT;
const Expr_Func_BuiltIn Expr_Func::FUNC_EQ;
const Expr_Func_BuiltIn Expr_Func::FUNC_LT;
const Expr_Func_BuiltIn Expr_Func::FUNC_LE;
const Expr_Func_BuiltIn Expr_Func::FUNC_GT;
const Expr_Func_BuiltIn Expr_Func::FUNC_GE;
const Expr_Func_BuiltIn Expr_Func::FUNC_NE;
const Expr_Func_BuiltIn Expr_Func::FUNC_REGEXP_MATCH;
const Expr_Func_BuiltIn Expr_Func::FUNC_LIKE;
const Expr_Func_BuiltIn Expr_Func::FUNC_LOWER;
const Expr_Func_BuiltIn Expr_Func::FUNC_UPPER;
const Expr_Func_BuiltIn Expr_Func::FUNC_STR_COMPARE;
const Expr_Func_BuiltIn Expr_Func::FUNC_STR_CONTAINS;
const Expr_Func_BuiltIn Expr_Func::FUNC_START_WITH;
const Expr_Func_BuiltIn Expr_Func::FUNC_END_WITH;
const Expr_Func_BuiltIn Expr_Func::FUNC_SUBSTRING;
const Expr_Func_BuiltIn Expr_Func::FUNC_ABS;
const Expr_Func_BuiltIn Expr_Func::FUNC_SQRT;
const Expr_Func_BuiltIn Expr_Func::FUNC_CAST;
const Expr_Func_BuiltIn Expr_Func::FUNC_COALESCE;
const Expr_Func_BuiltIn Expr_Func::FUNC_ISNULL;
const Expr_Func_BuiltIn Expr_Func::FUNC_ISNOTNULL;
const Expr_Func_BuiltIn Expr_Func::FUNC_MIN;
const Expr_Func_BuiltIn Expr_Func::FUNC_MAX;
const Expr_Func_BuiltIn Expr_Func::FUNC_IN;
const Expr_Func_BuiltIn Expr_Func::FUNC_IF;
const Expr_Func_BuiltIn Expr_Func::FUNC_CASE;
const Expr_Func_BuiltIn Expr_Func::FUNC_EMPTY_ARRAY;
const Expr_Func_BuiltIn Expr_Func::FUNC_ARRAY_INDEX;
const Expr_Func_BuiltIn Expr_Func::FUNC_EMPTY_SET;
const Expr_Func_BuiltIn Expr_Func::FUNC_ADD_TO_SET;
const Expr_Func_BuiltIn Expr_Func::FUNC_UNION;
const Expr_Func_BuiltIn Expr_Func::FUNC_COUNT;
const Expr_Func_BuiltIn Expr_Func::FUNC_GEN_EXPRS;
const Expr_Func_BuiltIn Expr_Func::FUNC_GEN_UNNEST;
const Expr_Func_BuiltIn Expr_Func::AGG_COUNT;
const Expr_Func_BuiltIn Expr_Func::AGG_SUM;
const Expr_Func_BuiltIn Expr_Func::AGG_MIN;
const Expr_Func_BuiltIn Expr_Func::AGG_MAX;
const Expr_Func_BuiltIn Expr_Func::AGG_AVG;
const Expr_Func_BuiltIn Expr_Func::AGG_FIRST;
const Expr_Func_BuiltIn Expr_Func::AGG_LAST;
const Expr_Func_BuiltIn Expr_Func::AGG_APPROXIMATE_COUNT;
const Expr_Func_BuiltIn Expr_Func::AGG_COLLECT_SET;
const Expr_Func_BuiltIn Expr_Func::AGG_UNION;
const Expr_Func_BuiltIn Expr_Func::AGG_UNION_AND_COUNT;
const Expr_Func_BuiltIn Expr_Func::BuiltIn_MIN;
const Expr_Func_BuiltIn Expr_Func::BuiltIn_MAX;
const int Expr_Func::BuiltIn_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Expr_Func::kNsFieldNumber;
const int Expr_Func::kFuncIdFieldNumber;
const int Expr_Func::kIsVolatileFieldNumber;
const int Expr_Func::kIsStrictFieldNumber;
const int Expr_Func::kIsDistinctFieldNumber;
const int Expr_Func::kArgsFieldNumber;
#endif  // !_MSC_VER

Expr_Func::Expr_Func()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Expr_Func::InitAsDefaultInstance() {
}

Expr_Func::Expr_Func(const Expr_Func& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Expr_Func::SharedCtor() {
  _cached_size_ = 0;
  ns_ = 0;
  func_id_ = 0;
  is_volatile_ = false;
  is_strict_ = true;
  is_distinct_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Expr_Func::~Expr_Func() {
  SharedDtor();
}

void Expr_Func::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Expr_Func::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Expr_Func::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Expr_Func_descriptor_;
}

const Expr_Func& Expr_Func::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Expr_Func* Expr_Func::default_instance_ = NULL;

Expr_Func* Expr_Func::New() const {
  return new Expr_Func;
}

void Expr_Func::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ns_ = 0;
    func_id_ = 0;
    is_volatile_ = false;
    is_strict_ = true;
    is_distinct_ = false;
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Expr_Func::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .llql_proto.Namespace ns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llql_proto::Namespace_IsValid(value)) {
            set_ns(static_cast< ::llql_proto::Namespace >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_func_id;
        break;
      }

      // required int32 func_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_func_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &func_id_)));
          set_has_func_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_volatile;
        break;
      }

      // required bool is_volatile = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_volatile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_volatile_)));
          set_has_is_volatile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_strict;
        break;
      }

      // required bool is_strict = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_strict:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_strict_)));
          set_has_is_strict();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_distinct;
        break;
      }

      // required bool is_distinct = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_distinct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_distinct_)));
          set_has_is_distinct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_args;
        break;
      }

      // repeated .llql_proto.Expr args = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Expr_Func::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .llql_proto.Namespace ns = 1;
  if (has_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ns(), output);
  }

  // required int32 func_id = 2;
  if (has_func_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->func_id(), output);
  }

  // required bool is_volatile = 3 [default = false];
  if (has_is_volatile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_volatile(), output);
  }

  // required bool is_strict = 4 [default = true];
  if (has_is_strict()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_strict(), output);
  }

  // required bool is_distinct = 5 [default = false];
  if (has_is_distinct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_distinct(), output);
  }

  // repeated .llql_proto.Expr args = 6;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->args(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Expr_Func::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .llql_proto.Namespace ns = 1;
  if (has_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ns(), target);
  }

  // required int32 func_id = 2;
  if (has_func_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->func_id(), target);
  }

  // required bool is_volatile = 3 [default = false];
  if (has_is_volatile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_volatile(), target);
  }

  // required bool is_strict = 4 [default = true];
  if (has_is_strict()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_strict(), target);
  }

  // required bool is_distinct = 5 [default = false];
  if (has_is_distinct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_distinct(), target);
  }

  // repeated .llql_proto.Expr args = 6;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->args(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Expr_Func::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .llql_proto.Namespace ns = 1;
    if (has_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ns());
    }

    // required int32 func_id = 2;
    if (has_func_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->func_id());
    }

    // required bool is_volatile = 3 [default = false];
    if (has_is_volatile()) {
      total_size += 1 + 1;
    }

    // required bool is_strict = 4 [default = true];
    if (has_is_strict()) {
      total_size += 1 + 1;
    }

    // required bool is_distinct = 5 [default = false];
    if (has_is_distinct()) {
      total_size += 1 + 1;
    }

  }
  // repeated .llql_proto.Expr args = 6;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Expr_Func::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Expr_Func* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Expr_Func*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Expr_Func::MergeFrom(const Expr_Func& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ns()) {
      set_ns(from.ns());
    }
    if (from.has_func_id()) {
      set_func_id(from.func_id());
    }
    if (from.has_is_volatile()) {
      set_is_volatile(from.is_volatile());
    }
    if (from.has_is_strict()) {
      set_is_strict(from.is_strict());
    }
    if (from.has_is_distinct()) {
      set_is_distinct(from.is_distinct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Expr_Func::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expr_Func::CopyFrom(const Expr_Func& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expr_Func::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  return true;
}

void Expr_Func::Swap(Expr_Func* other) {
  if (other != this) {
    std::swap(ns_, other->ns_);
    std::swap(func_id_, other->func_id_);
    std::swap(is_volatile_, other->is_volatile_);
    std::swap(is_strict_, other->is_strict_);
    std::swap(is_distinct_, other->is_distinct_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Expr_Func::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Expr_Func_descriptor_;
  metadata.reflection = Expr_Func_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Expr::kDtFieldNumber;
const int Expr::kConstValFieldNumber;
const int Expr::kColrefFieldNumber;
const int Expr::kFuncFieldNumber;
#endif  // !_MSC_VER

Expr::Expr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Expr::InitAsDefaultInstance() {
  dt_ = const_cast< ::llql_proto::DataType*>(&::llql_proto::DataType::default_instance());
  const_val_ = const_cast< ::llql_proto::Expr_Const*>(&::llql_proto::Expr_Const::default_instance());
  colref_ = const_cast< ::llql_proto::Expr_ColRef*>(&::llql_proto::Expr_ColRef::default_instance());
  func_ = const_cast< ::llql_proto::Expr_Func*>(&::llql_proto::Expr_Func::default_instance());
}

Expr::Expr(const Expr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Expr::SharedCtor() {
  _cached_size_ = 0;
  dt_ = NULL;
  const_val_ = NULL;
  colref_ = NULL;
  func_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Expr::~Expr() {
  SharedDtor();
}

void Expr::SharedDtor() {
  if (this != default_instance_) {
    delete dt_;
    delete const_val_;
    delete colref_;
    delete func_;
  }
}

void Expr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Expr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Expr_descriptor_;
}

const Expr& Expr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Expr* Expr::default_instance_ = NULL;

Expr* Expr::New() const {
  return new Expr;
}

void Expr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dt()) {
      if (dt_ != NULL) dt_->::llql_proto::DataType::Clear();
    }
    if (has_const_val()) {
      if (const_val_ != NULL) const_val_->::llql_proto::Expr_Const::Clear();
    }
    if (has_colref()) {
      if (colref_ != NULL) colref_->::llql_proto::Expr_ColRef::Clear();
    }
    if (has_func()) {
      if (func_ != NULL) func_->::llql_proto::Expr_Func::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Expr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .llql_proto.DataType dt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_const_val;
        break;
      }

      // optional .llql_proto.Expr.Const const_val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_const_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_const_val()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_colref;
        break;
      }

      // optional .llql_proto.Expr.ColRef colref = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_colref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_colref()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_func;
        break;
      }

      // optional .llql_proto.Expr.Func func = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_func:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_func()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Expr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .llql_proto.DataType dt = 1;
  if (has_dt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dt(), output);
  }

  // optional .llql_proto.Expr.Const const_val = 2;
  if (has_const_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->const_val(), output);
  }

  // optional .llql_proto.Expr.ColRef colref = 3;
  if (has_colref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->colref(), output);
  }

  // optional .llql_proto.Expr.Func func = 4;
  if (has_func()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->func(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Expr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .llql_proto.DataType dt = 1;
  if (has_dt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dt(), target);
  }

  // optional .llql_proto.Expr.Const const_val = 2;
  if (has_const_val()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->const_val(), target);
  }

  // optional .llql_proto.Expr.ColRef colref = 3;
  if (has_colref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->colref(), target);
  }

  // optional .llql_proto.Expr.Func func = 4;
  if (has_func()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->func(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Expr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .llql_proto.DataType dt = 1;
    if (has_dt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt());
    }

    // optional .llql_proto.Expr.Const const_val = 2;
    if (has_const_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->const_val());
    }

    // optional .llql_proto.Expr.ColRef colref = 3;
    if (has_colref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->colref());
    }

    // optional .llql_proto.Expr.Func func = 4;
    if (has_func()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->func());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Expr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Expr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Expr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Expr::MergeFrom(const Expr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dt()) {
      mutable_dt()->::llql_proto::DataType::MergeFrom(from.dt());
    }
    if (from.has_const_val()) {
      mutable_const_val()->::llql_proto::Expr_Const::MergeFrom(from.const_val());
    }
    if (from.has_colref()) {
      mutable_colref()->::llql_proto::Expr_ColRef::MergeFrom(from.colref());
    }
    if (from.has_func()) {
      mutable_func()->::llql_proto::Expr_Func::MergeFrom(from.func());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Expr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expr::CopyFrom(const Expr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_dt()) {
    if (!this->dt().IsInitialized()) return false;
  }
  if (has_const_val()) {
    if (!this->const_val().IsInitialized()) return false;
  }
  if (has_colref()) {
    if (!this->colref().IsInitialized()) return false;
  }
  if (has_func()) {
    if (!this->func().IsInitialized()) return false;
  }
  return true;
}

void Expr::Swap(Expr* other) {
  if (other != this) {
    std::swap(dt_, other->dt_);
    std::swap(const_val_, other->const_val_);
    std::swap(colref_, other->colref_);
    std::swap(func_, other->func_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Expr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Expr_descriptor_;
  metadata.reflection = Expr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SortExpr::kExprFieldNumber;
const int SortExpr::kDescFieldNumber;
const int SortExpr::kNullFirstFieldNumber;
#endif  // !_MSC_VER

SortExpr::SortExpr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SortExpr::InitAsDefaultInstance() {
  expr_ = const_cast< ::llql_proto::Expr*>(&::llql_proto::Expr::default_instance());
}

SortExpr::SortExpr(const SortExpr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SortExpr::SharedCtor() {
  _cached_size_ = 0;
  expr_ = NULL;
  desc_ = false;
  null_first_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SortExpr::~SortExpr() {
  SharedDtor();
}

void SortExpr::SharedDtor() {
  if (this != default_instance_) {
    delete expr_;
  }
}

void SortExpr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SortExpr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortExpr_descriptor_;
}

const SortExpr& SortExpr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

SortExpr* SortExpr::default_instance_ = NULL;

SortExpr* SortExpr::New() const {
  return new SortExpr;
}

void SortExpr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_expr()) {
      if (expr_ != NULL) expr_->::llql_proto::Expr::Clear();
    }
    desc_ = false;
    null_first_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SortExpr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .llql_proto.Expr expr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_desc;
        break;
      }

      // required bool desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &desc_)));
          set_has_desc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_null_first;
        break;
      }

      // required bool null_first = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_null_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &null_first_)));
          set_has_null_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SortExpr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .llql_proto.Expr expr = 1;
  if (has_expr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->expr(), output);
  }

  // required bool desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->desc(), output);
  }

  // required bool null_first = 3;
  if (has_null_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->null_first(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SortExpr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .llql_proto.Expr expr = 1;
  if (has_expr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->expr(), target);
  }

  // required bool desc = 2;
  if (has_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->desc(), target);
  }

  // required bool null_first = 3;
  if (has_null_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->null_first(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SortExpr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .llql_proto.Expr expr = 1;
    if (has_expr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expr());
    }

    // required bool desc = 2;
    if (has_desc()) {
      total_size += 1 + 1;
    }

    // required bool null_first = 3;
    if (has_null_first()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SortExpr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SortExpr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SortExpr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SortExpr::MergeFrom(const SortExpr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expr()) {
      mutable_expr()->::llql_proto::Expr::MergeFrom(from.expr());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_null_first()) {
      set_null_first(from.null_first());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SortExpr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortExpr::CopyFrom(const SortExpr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortExpr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_expr()) {
    if (!this->expr().IsInitialized()) return false;
  }
  return true;
}

void SortExpr::Swap(SortExpr* other) {
  if (other != this) {
    std::swap(expr_, other->expr_);
    std::swap(desc_, other->desc_);
    std::swap(null_first_, other->null_first_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SortExpr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SortExpr_descriptor_;
  metadata.reflection = SortExpr_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llql_proto

// @@protoc_insertion_point(global_scope)
