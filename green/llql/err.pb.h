// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: err.proto

#ifndef PROTOBUF_err_2eproto__INCLUDED
#define PROTOBUF_err_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace llql_proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_err_2eproto();
void protobuf_AssignDesc_err_2eproto();
void protobuf_ShutdownFile_err_2eproto();

class Error;

enum ErrorCode {
  EC_OK = 0,
  EC_STOP = 1,
  EC_RUNTIME_ERROR = 2,
  EC_JIT_INIT_FAILED = 100,
  EC_JIT_FAILED = 101,
  EC_OUT_OF_RESOURCE = 1000,
  EC_OUT_OF_MEMORY = 1001,
  EC_BAD_MSG = 2000,
  EC_BAD_MSG_CHKSUM = 2001,
  EC_QUERY_NOT_REGISTERED = 2002,
  EC_OBSOLETE = 2003,
  EC_NETWORK_ERROR = 3000,
  EC_CSV_PARSING_ERROR = 4000,
  EC_INT_PARSING_ERROR = 4001,
  EC_FLOAT_PARSING_ERROR = 4002,
  EC_NYI = 1000000,
  EC_TEST_WRONG_RESULT = 1000001
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = EC_OK;
const ErrorCode ErrorCode_MAX = EC_TEST_WRONG_RESULT;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class Error : public ::google::protobuf::Message {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  void Swap(Error* other);

  // implements Message ----------------------------------------------

  Error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .llql_proto.ErrorCode ec = 1;
  inline bool has_ec() const;
  inline void clear_ec();
  static const int kEcFieldNumber = 1;
  inline ::llql_proto::ErrorCode ec() const;
  inline void set_ec(::llql_proto::ErrorCode value);

  // required string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:llql_proto.Error)
 private:
  inline void set_has_ec();
  inline void clear_has_ec();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  int ec_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_err_2eproto();
  friend void protobuf_AssignDesc_err_2eproto();
  friend void protobuf_ShutdownFile_err_2eproto();

  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// ===================================================================


// ===================================================================

// Error

// required .llql_proto.ErrorCode ec = 1;
inline bool Error::has_ec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error::set_has_ec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Error::clear_has_ec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Error::clear_ec() {
  ec_ = 0;
  clear_has_ec();
}
inline ::llql_proto::ErrorCode Error::ec() const {
  return static_cast< ::llql_proto::ErrorCode >(ec_);
}
inline void Error::set_ec(::llql_proto::ErrorCode value) {
  assert(::llql_proto::ErrorCode_IsValid(value));
  set_has_ec();
  ec_ = value;
}

// required string msg = 2;
inline bool Error::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Error::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Error::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Error::msg() const {
  return *msg_;
}
inline void Error::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Error::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Error::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* Error::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Error::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llql_proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llql_proto::ErrorCode>() {
  return ::llql_proto::ErrorCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_err_2eproto__INCLUDED
