// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quark.proto

#ifndef PROTOBUF_quark_2eproto__INCLUDED
#define PROTOBUF_quark_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "err.pb.h"
#include "query.pb.h"
// @@protoc_insertion_point(includes)

namespace llql_proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_quark_2eproto();
void protobuf_AssignDesc_quark_2eproto();
void protobuf_ShutdownFile_quark_2eproto();

class ColData;
class RelData;
class QueryPartition;
class QuarkCmd;
class HostInfo;
class LLQLCmd;
class AdminCmd;

enum QuarkCmd_CmdType {
  QuarkCmd_CmdType_RETURN = 0,
  QuarkCmd_CmdType_REGISTER_QUERY = 1,
  QuarkCmd_CmdType_EXECUTE_QUERY = 2,
  QuarkCmd_CmdType_STOP_QUERY = 3
};
bool QuarkCmd_CmdType_IsValid(int value);
const QuarkCmd_CmdType QuarkCmd_CmdType_CmdType_MIN = QuarkCmd_CmdType_RETURN;
const QuarkCmd_CmdType QuarkCmd_CmdType_CmdType_MAX = QuarkCmd_CmdType_STOP_QUERY;
const int QuarkCmd_CmdType_CmdType_ARRAYSIZE = QuarkCmd_CmdType_CmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* QuarkCmd_CmdType_descriptor();
inline const ::std::string& QuarkCmd_CmdType_Name(QuarkCmd_CmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    QuarkCmd_CmdType_descriptor(), value);
}
inline bool QuarkCmd_CmdType_Parse(
    const ::std::string& name, QuarkCmd_CmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QuarkCmd_CmdType>(
    QuarkCmd_CmdType_descriptor(), name, value);
}
enum LLQLCmd_CmdType {
  LLQLCmd_CmdType_RETURN = 0,
  LLQLCmd_CmdType_START_HOST = 1,
  LLQLCmd_CmdType_START_PARTITION = 2,
  LLQLCmd_CmdType_CONNECT_PEER = 3,
  LLQLCmd_CmdType_CONNECT_PEER_ACK = 4,
  LLQLCmd_CmdType_EXEC_PARTITION = 5
};
bool LLQLCmd_CmdType_IsValid(int value);
const LLQLCmd_CmdType LLQLCmd_CmdType_CmdType_MIN = LLQLCmd_CmdType_RETURN;
const LLQLCmd_CmdType LLQLCmd_CmdType_CmdType_MAX = LLQLCmd_CmdType_EXEC_PARTITION;
const int LLQLCmd_CmdType_CmdType_ARRAYSIZE = LLQLCmd_CmdType_CmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LLQLCmd_CmdType_descriptor();
inline const ::std::string& LLQLCmd_CmdType_Name(LLQLCmd_CmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LLQLCmd_CmdType_descriptor(), value);
}
inline bool LLQLCmd_CmdType_Parse(
    const ::std::string& name, LLQLCmd_CmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LLQLCmd_CmdType>(
    LLQLCmd_CmdType_descriptor(), name, value);
}
enum AdminCmd_CmdType {
  AdminCmd_CmdType_RETURN = 0,
  AdminCmd_CmdType_SHOW_CONF = 1,
  AdminCmd_CmdType_SHOW_SLAVES = 2,
  AdminCmd_CmdType_SHOW_PEERS = 3
};
bool AdminCmd_CmdType_IsValid(int value);
const AdminCmd_CmdType AdminCmd_CmdType_CmdType_MIN = AdminCmd_CmdType_RETURN;
const AdminCmd_CmdType AdminCmd_CmdType_CmdType_MAX = AdminCmd_CmdType_SHOW_PEERS;
const int AdminCmd_CmdType_CmdType_ARRAYSIZE = AdminCmd_CmdType_CmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AdminCmd_CmdType_descriptor();
inline const ::std::string& AdminCmd_CmdType_Name(AdminCmd_CmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AdminCmd_CmdType_descriptor(), value);
}
inline bool AdminCmd_CmdType_Parse(
    const ::std::string& name, AdminCmd_CmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdminCmd_CmdType>(
    AdminCmd_CmdType_descriptor(), name, value);
}
enum Magic {
  LLQL_MAGIC = 299792458,
  LLQL_VERSION = 1
};
bool Magic_IsValid(int value);
const Magic Magic_MIN = LLQL_VERSION;
const Magic Magic_MAX = LLQL_MAGIC;
const int Magic_ARRAYSIZE = Magic_MAX + 1;

const ::google::protobuf::EnumDescriptor* Magic_descriptor();
inline const ::std::string& Magic_Name(Magic value) {
  return ::google::protobuf::internal::NameOfEnum(
    Magic_descriptor(), value);
}
inline bool Magic_Parse(
    const ::std::string& name, Magic* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Magic>(
    Magic_descriptor(), name, value);
}
enum MessageType {
  MSG_TEST = 0,
  MSG_ADMIN_CMD = 1,
  MSG_QUARK_CMD = 2,
  MSG_LLQL_CMD = 3,
  MSG_DATA = 4,
  MSG_QUERY_EXEC = 5,
  MSG_ERROR = 6
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = MSG_TEST;
const MessageType MessageType_MAX = MSG_ERROR;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class ColData : public ::google::protobuf::Message {
 public:
  ColData();
  virtual ~ColData();

  ColData(const ColData& from);

  inline ColData& operator=(const ColData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColData& default_instance();

  void Swap(ColData* other);

  // implements Message ----------------------------------------------

  ColData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColData& from);
  void MergeFrom(const ColData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool isnull = 1;
  inline int isnull_size() const;
  inline void clear_isnull();
  static const int kIsnullFieldNumber = 1;
  inline bool isnull(int index) const;
  inline void set_isnull(int index, bool value);
  inline void add_isnull(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      isnull() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_isnull();

  // repeated bool boolval = 2;
  inline int boolval_size() const;
  inline void clear_boolval();
  static const int kBoolvalFieldNumber = 2;
  inline bool boolval(int index) const;
  inline void set_boolval(int index, bool value);
  inline void add_boolval(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      boolval() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_boolval();

  // repeated int32 i32val = 3;
  inline int i32val_size() const;
  inline void clear_i32val();
  static const int kI32ValFieldNumber = 3;
  inline ::google::protobuf::int32 i32val(int index) const;
  inline void set_i32val(int index, ::google::protobuf::int32 value);
  inline void add_i32val(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      i32val() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_i32val();

  // repeated int64 i64val = 4;
  inline int i64val_size() const;
  inline void clear_i64val();
  static const int kI64ValFieldNumber = 4;
  inline ::google::protobuf::int64 i64val(int index) const;
  inline void set_i64val(int index, ::google::protobuf::int64 value);
  inline void add_i64val(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      i64val() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_i64val();

  // repeated float floatval = 5;
  inline int floatval_size() const;
  inline void clear_floatval();
  static const int kFloatvalFieldNumber = 5;
  inline float floatval(int index) const;
  inline void set_floatval(int index, float value);
  inline void add_floatval(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      floatval() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_floatval();

  // repeated double doubleval = 6;
  inline int doubleval_size() const;
  inline void clear_doubleval();
  static const int kDoublevalFieldNumber = 6;
  inline double doubleval(int index) const;
  inline void set_doubleval(int index, double value);
  inline void add_doubleval(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      doubleval() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_doubleval();

  // repeated string strval = 7;
  inline int strval_size() const;
  inline void clear_strval();
  static const int kStrvalFieldNumber = 7;
  inline const ::std::string& strval(int index) const;
  inline ::std::string* mutable_strval(int index);
  inline void set_strval(int index, const ::std::string& value);
  inline void set_strval(int index, const char* value);
  inline void set_strval(int index, const char* value, size_t size);
  inline ::std::string* add_strval();
  inline void add_strval(const ::std::string& value);
  inline void add_strval(const char* value);
  inline void add_strval(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& strval() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strval();

  // repeated bytes bytesval = 8;
  inline int bytesval_size() const;
  inline void clear_bytesval();
  static const int kBytesvalFieldNumber = 8;
  inline const ::std::string& bytesval(int index) const;
  inline ::std::string* mutable_bytesval(int index);
  inline void set_bytesval(int index, const ::std::string& value);
  inline void set_bytesval(int index, const char* value);
  inline void set_bytesval(int index, const void* value, size_t size);
  inline ::std::string* add_bytesval();
  inline void add_bytesval(const ::std::string& value);
  inline void add_bytesval(const char* value);
  inline void add_bytesval(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bytesval() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bytesval();

  // @@protoc_insertion_point(class_scope:llql_proto.ColData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< bool > isnull_;
  ::google::protobuf::RepeatedField< bool > boolval_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > i32val_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > i64val_;
  ::google::protobuf::RepeatedField< float > floatval_;
  ::google::protobuf::RepeatedField< double > doubleval_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strval_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bytesval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_quark_2eproto();
  friend void protobuf_AssignDesc_quark_2eproto();
  friend void protobuf_ShutdownFile_quark_2eproto();

  void InitAsDefaultInstance();
  static ColData* default_instance_;
};
// -------------------------------------------------------------------

class RelData : public ::google::protobuf::Message {
 public:
  RelData();
  virtual ~RelData();

  RelData(const RelData& from);

  inline RelData& operator=(const RelData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelData& default_instance();

  void Swap(RelData* other);

  // implements Message ----------------------------------------------

  RelData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RelData& from);
  void MergeFrom(const RelData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool last = 1;
  inline bool has_last() const;
  inline void clear_last();
  static const int kLastFieldNumber = 1;
  inline bool last() const;
  inline void set_last(bool value);

  // required int32 ntuple = 2;
  inline bool has_ntuple() const;
  inline void clear_ntuple();
  static const int kNtupleFieldNumber = 2;
  inline ::google::protobuf::int32 ntuple() const;
  inline void set_ntuple(::google::protobuf::int32 value);

  // required int32 ncol = 3;
  inline bool has_ncol() const;
  inline void clear_ncol();
  static const int kNcolFieldNumber = 3;
  inline ::google::protobuf::int32 ncol() const;
  inline void set_ncol(::google::protobuf::int32 value);

  // repeated .llql_proto.ColData cols = 4;
  inline int cols_size() const;
  inline void clear_cols();
  static const int kColsFieldNumber = 4;
  inline const ::llql_proto::ColData& cols(int index) const;
  inline ::llql_proto::ColData* mutable_cols(int index);
  inline ::llql_proto::ColData* add_cols();
  inline const ::google::protobuf::RepeatedPtrField< ::llql_proto::ColData >&
      cols() const;
  inline ::google::protobuf::RepeatedPtrField< ::llql_proto::ColData >*
      mutable_cols();

  // @@protoc_insertion_point(class_scope:llql_proto.RelData)
 private:
  inline void set_has_last();
  inline void clear_has_last();
  inline void set_has_ntuple();
  inline void clear_has_ntuple();
  inline void set_has_ncol();
  inline void clear_has_ncol();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool last_;
  ::google::protobuf::int32 ntuple_;
  ::google::protobuf::RepeatedPtrField< ::llql_proto::ColData > cols_;
  ::google::protobuf::int32 ncol_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_quark_2eproto();
  friend void protobuf_AssignDesc_quark_2eproto();
  friend void protobuf_ShutdownFile_quark_2eproto();

  void InitAsDefaultInstance();
  static RelData* default_instance_;
};
// -------------------------------------------------------------------

class QueryPartition : public ::google::protobuf::Message {
 public:
  QueryPartition();
  virtual ~QueryPartition();

  QueryPartition(const QueryPartition& from);

  inline QueryPartition& operator=(const QueryPartition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryPartition& default_instance();

  void Swap(QueryPartition* other);

  // implements Message ----------------------------------------------

  QueryPartition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryPartition& from);
  void MergeFrom(const QueryPartition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string query_id = 1;
  inline bool has_query_id() const;
  inline void clear_query_id();
  static const int kQueryIdFieldNumber = 1;
  inline const ::std::string& query_id() const;
  inline void set_query_id(const ::std::string& value);
  inline void set_query_id(const char* value);
  inline void set_query_id(const char* value, size_t size);
  inline ::std::string* mutable_query_id();
  inline ::std::string* release_query_id();
  inline void set_allocated_query_id(::std::string* query_id);

  // required int32 stage_id = 2;
  inline bool has_stage_id() const;
  inline void clear_stage_id();
  static const int kStageIdFieldNumber = 2;
  inline ::google::protobuf::int32 stage_id() const;
  inline void set_stage_id(::google::protobuf::int32 value);

  // required int32 partition = 3;
  inline bool has_partition() const;
  inline void clear_partition();
  static const int kPartitionFieldNumber = 3;
  inline ::google::protobuf::int32 partition() const;
  inline void set_partition(::google::protobuf::int32 value);

  // required int32 total_partition = 4;
  inline bool has_total_partition() const;
  inline void clear_total_partition();
  static const int kTotalPartitionFieldNumber = 4;
  inline ::google::protobuf::int32 total_partition() const;
  inline void set_total_partition(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:llql_proto.QueryPartition)
 private:
  inline void set_has_query_id();
  inline void clear_has_query_id();
  inline void set_has_stage_id();
  inline void clear_has_stage_id();
  inline void set_has_partition();
  inline void clear_has_partition();
  inline void set_has_total_partition();
  inline void clear_has_total_partition();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* query_id_;
  ::google::protobuf::int32 stage_id_;
  ::google::protobuf::int32 partition_;
  ::google::protobuf::int32 total_partition_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_quark_2eproto();
  friend void protobuf_AssignDesc_quark_2eproto();
  friend void protobuf_ShutdownFile_quark_2eproto();

  void InitAsDefaultInstance();
  static QueryPartition* default_instance_;
};
// -------------------------------------------------------------------

class QuarkCmd : public ::google::protobuf::Message {
 public:
  QuarkCmd();
  virtual ~QuarkCmd();

  QuarkCmd(const QuarkCmd& from);

  inline QuarkCmd& operator=(const QuarkCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuarkCmd& default_instance();

  void Swap(QuarkCmd* other);

  // implements Message ----------------------------------------------

  QuarkCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuarkCmd& from);
  void MergeFrom(const QuarkCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef QuarkCmd_CmdType CmdType;
  static const CmdType RETURN = QuarkCmd_CmdType_RETURN;
  static const CmdType REGISTER_QUERY = QuarkCmd_CmdType_REGISTER_QUERY;
  static const CmdType EXECUTE_QUERY = QuarkCmd_CmdType_EXECUTE_QUERY;
  static const CmdType STOP_QUERY = QuarkCmd_CmdType_STOP_QUERY;
  static inline bool CmdType_IsValid(int value) {
    return QuarkCmd_CmdType_IsValid(value);
  }
  static const CmdType CmdType_MIN =
    QuarkCmd_CmdType_CmdType_MIN;
  static const CmdType CmdType_MAX =
    QuarkCmd_CmdType_CmdType_MAX;
  static const int CmdType_ARRAYSIZE =
    QuarkCmd_CmdType_CmdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdType_descriptor() {
    return QuarkCmd_CmdType_descriptor();
  }
  static inline const ::std::string& CmdType_Name(CmdType value) {
    return QuarkCmd_CmdType_Name(value);
  }
  static inline bool CmdType_Parse(const ::std::string& name,
      CmdType* value) {
    return QuarkCmd_CmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .llql_proto.QuarkCmd.CmdType ct = 1;
  inline bool has_ct() const;
  inline void clear_ct();
  static const int kCtFieldNumber = 1;
  inline ::llql_proto::QuarkCmd_CmdType ct() const;
  inline void set_ct(::llql_proto::QuarkCmd_CmdType value);

  // optional .llql_proto.Error err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline const ::llql_proto::Error& err() const;
  inline ::llql_proto::Error* mutable_err();
  inline ::llql_proto::Error* release_err();
  inline void set_allocated_err(::llql_proto::Error* err);

  // optional string query_id = 3;
  inline bool has_query_id() const;
  inline void clear_query_id();
  static const int kQueryIdFieldNumber = 3;
  inline const ::std::string& query_id() const;
  inline void set_query_id(const ::std::string& value);
  inline void set_query_id(const char* value);
  inline void set_query_id(const char* value, size_t size);
  inline ::std::string* mutable_query_id();
  inline ::std::string* release_query_id();
  inline void set_allocated_query_id(::std::string* query_id);

  // optional bytes query = 4;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 4;
  inline const ::std::string& query() const;
  inline void set_query(const ::std::string& value);
  inline void set_query(const char* value);
  inline void set_query(const void* value, size_t size);
  inline ::std::string* mutable_query();
  inline ::std::string* release_query();
  inline void set_allocated_query(::std::string* query);

  // optional .llql_proto.QueryPartition query_partition = 5;
  inline bool has_query_partition() const;
  inline void clear_query_partition();
  static const int kQueryPartitionFieldNumber = 5;
  inline const ::llql_proto::QueryPartition& query_partition() const;
  inline ::llql_proto::QueryPartition* mutable_query_partition();
  inline ::llql_proto::QueryPartition* release_query_partition();
  inline void set_allocated_query_partition(::llql_proto::QueryPartition* query_partition);

  // optional .llql_proto.RelData query_result = 6;
  inline bool has_query_result() const;
  inline void clear_query_result();
  static const int kQueryResultFieldNumber = 6;
  inline const ::llql_proto::RelData& query_result() const;
  inline ::llql_proto::RelData* mutable_query_result();
  inline ::llql_proto::RelData* release_query_result();
  inline void set_allocated_query_result(::llql_proto::RelData* query_result);

  // @@protoc_insertion_point(class_scope:llql_proto.QuarkCmd)
 private:
  inline void set_has_ct();
  inline void clear_has_ct();
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_query_id();
  inline void clear_has_query_id();
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_query_partition();
  inline void clear_has_query_partition();
  inline void set_has_query_result();
  inline void clear_has_query_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::llql_proto::Error* err_;
  ::std::string* query_id_;
  ::std::string* query_;
  ::llql_proto::QueryPartition* query_partition_;
  ::llql_proto::RelData* query_result_;
  int ct_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_quark_2eproto();
  friend void protobuf_AssignDesc_quark_2eproto();
  friend void protobuf_ShutdownFile_quark_2eproto();

  void InitAsDefaultInstance();
  static QuarkCmd* default_instance_;
};
// -------------------------------------------------------------------

class HostInfo : public ::google::protobuf::Message {
 public:
  HostInfo();
  virtual ~HostInfo();

  HostInfo(const HostInfo& from);

  inline HostInfo& operator=(const HostInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HostInfo& default_instance();

  void Swap(HostInfo* other);

  // implements Message ----------------------------------------------

  HostInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HostInfo& from);
  void MergeFrom(const HostInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 host_id = 1;
  inline bool has_host_id() const;
  inline void clear_host_id();
  static const int kHostIdFieldNumber = 1;
  inline ::google::protobuf::int32 host_id() const;
  inline void set_host_id(::google::protobuf::int32 value);

  // required int32 host_gen = 2;
  inline bool has_host_gen() const;
  inline void clear_host_gen();
  static const int kHostGenFieldNumber = 2;
  inline ::google::protobuf::int32 host_gen() const;
  inline void set_host_gen(::google::protobuf::int32 value);

  // required string hostname = 3;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 3;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const char* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // required int32 listen_port = 4;
  inline bool has_listen_port() const;
  inline void clear_listen_port();
  static const int kListenPortFieldNumber = 4;
  inline ::google::protobuf::int32 listen_port() const;
  inline void set_listen_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:llql_proto.HostInfo)
 private:
  inline void set_has_host_id();
  inline void clear_has_host_id();
  inline void set_has_host_gen();
  inline void clear_has_host_gen();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_listen_port();
  inline void clear_has_listen_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 host_id_;
  ::google::protobuf::int32 host_gen_;
  ::std::string* hostname_;
  ::google::protobuf::int32 listen_port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_quark_2eproto();
  friend void protobuf_AssignDesc_quark_2eproto();
  friend void protobuf_ShutdownFile_quark_2eproto();

  void InitAsDefaultInstance();
  static HostInfo* default_instance_;
};
// -------------------------------------------------------------------

class LLQLCmd : public ::google::protobuf::Message {
 public:
  LLQLCmd();
  virtual ~LLQLCmd();

  LLQLCmd(const LLQLCmd& from);

  inline LLQLCmd& operator=(const LLQLCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LLQLCmd& default_instance();

  void Swap(LLQLCmd* other);

  // implements Message ----------------------------------------------

  LLQLCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LLQLCmd& from);
  void MergeFrom(const LLQLCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LLQLCmd_CmdType CmdType;
  static const CmdType RETURN = LLQLCmd_CmdType_RETURN;
  static const CmdType START_HOST = LLQLCmd_CmdType_START_HOST;
  static const CmdType START_PARTITION = LLQLCmd_CmdType_START_PARTITION;
  static const CmdType CONNECT_PEER = LLQLCmd_CmdType_CONNECT_PEER;
  static const CmdType CONNECT_PEER_ACK = LLQLCmd_CmdType_CONNECT_PEER_ACK;
  static const CmdType EXEC_PARTITION = LLQLCmd_CmdType_EXEC_PARTITION;
  static inline bool CmdType_IsValid(int value) {
    return LLQLCmd_CmdType_IsValid(value);
  }
  static const CmdType CmdType_MIN =
    LLQLCmd_CmdType_CmdType_MIN;
  static const CmdType CmdType_MAX =
    LLQLCmd_CmdType_CmdType_MAX;
  static const int CmdType_ARRAYSIZE =
    LLQLCmd_CmdType_CmdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdType_descriptor() {
    return LLQLCmd_CmdType_descriptor();
  }
  static inline const ::std::string& CmdType_Name(CmdType value) {
    return LLQLCmd_CmdType_Name(value);
  }
  static inline bool CmdType_Parse(const ::std::string& name,
      CmdType* value) {
    return LLQLCmd_CmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .llql_proto.LLQLCmd.CmdType ct = 1;
  inline bool has_ct() const;
  inline void clear_ct();
  static const int kCtFieldNumber = 1;
  inline ::llql_proto::LLQLCmd_CmdType ct() const;
  inline void set_ct(::llql_proto::LLQLCmd_CmdType value);

  // optional .llql_proto.Error err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline const ::llql_proto::Error& err() const;
  inline ::llql_proto::Error* mutable_err();
  inline ::llql_proto::Error* release_err();
  inline void set_allocated_err(::llql_proto::Error* err);

  // repeated .llql_proto.HostInfo host_info = 3;
  inline int host_info_size() const;
  inline void clear_host_info();
  static const int kHostInfoFieldNumber = 3;
  inline const ::llql_proto::HostInfo& host_info(int index) const;
  inline ::llql_proto::HostInfo* mutable_host_info(int index);
  inline ::llql_proto::HostInfo* add_host_info();
  inline const ::google::protobuf::RepeatedPtrField< ::llql_proto::HostInfo >&
      host_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::llql_proto::HostInfo >*
      mutable_host_info();

  // optional .llql_proto.QueryPartition query_partition = 4;
  inline bool has_query_partition() const;
  inline void clear_query_partition();
  static const int kQueryPartitionFieldNumber = 4;
  inline const ::llql_proto::QueryPartition& query_partition() const;
  inline ::llql_proto::QueryPartition* mutable_query_partition();
  inline ::llql_proto::QueryPartition* release_query_partition();
  inline void set_allocated_query_partition(::llql_proto::QueryPartition* query_partition);

  // optional bytes query_string = 5;
  inline bool has_query_string() const;
  inline void clear_query_string();
  static const int kQueryStringFieldNumber = 5;
  inline const ::std::string& query_string() const;
  inline void set_query_string(const ::std::string& value);
  inline void set_query_string(const char* value);
  inline void set_query_string(const void* value, size_t size);
  inline ::std::string* mutable_query_string();
  inline ::std::string* release_query_string();
  inline void set_allocated_query_string(::std::string* query_string);

  // optional .llql_proto.RelData query_result = 6;
  inline bool has_query_result() const;
  inline void clear_query_result();
  static const int kQueryResultFieldNumber = 6;
  inline const ::llql_proto::RelData& query_result() const;
  inline ::llql_proto::RelData* mutable_query_result();
  inline ::llql_proto::RelData* release_query_result();
  inline void set_allocated_query_result(::llql_proto::RelData* query_result);

  // @@protoc_insertion_point(class_scope:llql_proto.LLQLCmd)
 private:
  inline void set_has_ct();
  inline void clear_has_ct();
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_query_partition();
  inline void clear_has_query_partition();
  inline void set_has_query_string();
  inline void clear_has_query_string();
  inline void set_has_query_result();
  inline void clear_has_query_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::llql_proto::Error* err_;
  ::google::protobuf::RepeatedPtrField< ::llql_proto::HostInfo > host_info_;
  ::llql_proto::QueryPartition* query_partition_;
  ::std::string* query_string_;
  ::llql_proto::RelData* query_result_;
  int ct_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_quark_2eproto();
  friend void protobuf_AssignDesc_quark_2eproto();
  friend void protobuf_ShutdownFile_quark_2eproto();

  void InitAsDefaultInstance();
  static LLQLCmd* default_instance_;
};
// -------------------------------------------------------------------

class AdminCmd : public ::google::protobuf::Message {
 public:
  AdminCmd();
  virtual ~AdminCmd();

  AdminCmd(const AdminCmd& from);

  inline AdminCmd& operator=(const AdminCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdminCmd& default_instance();

  void Swap(AdminCmd* other);

  // implements Message ----------------------------------------------

  AdminCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdminCmd& from);
  void MergeFrom(const AdminCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AdminCmd_CmdType CmdType;
  static const CmdType RETURN = AdminCmd_CmdType_RETURN;
  static const CmdType SHOW_CONF = AdminCmd_CmdType_SHOW_CONF;
  static const CmdType SHOW_SLAVES = AdminCmd_CmdType_SHOW_SLAVES;
  static const CmdType SHOW_PEERS = AdminCmd_CmdType_SHOW_PEERS;
  static inline bool CmdType_IsValid(int value) {
    return AdminCmd_CmdType_IsValid(value);
  }
  static const CmdType CmdType_MIN =
    AdminCmd_CmdType_CmdType_MIN;
  static const CmdType CmdType_MAX =
    AdminCmd_CmdType_CmdType_MAX;
  static const int CmdType_ARRAYSIZE =
    AdminCmd_CmdType_CmdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdType_descriptor() {
    return AdminCmd_CmdType_descriptor();
  }
  static inline const ::std::string& CmdType_Name(CmdType value) {
    return AdminCmd_CmdType_Name(value);
  }
  static inline bool CmdType_Parse(const ::std::string& name,
      CmdType* value) {
    return AdminCmd_CmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .llql_proto.AdminCmd.CmdType ct = 1;
  inline bool has_ct() const;
  inline void clear_ct();
  static const int kCtFieldNumber = 1;
  inline ::llql_proto::AdminCmd_CmdType ct() const;
  inline void set_ct(::llql_proto::AdminCmd_CmdType value);

  // optional .llql_proto.Error err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline const ::llql_proto::Error& err() const;
  inline ::llql_proto::Error* mutable_err();
  inline ::llql_proto::Error* release_err();
  inline void set_allocated_err(::llql_proto::Error* err);

  // optional .llql_proto.RelData result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline const ::llql_proto::RelData& result() const;
  inline ::llql_proto::RelData* mutable_result();
  inline ::llql_proto::RelData* release_result();
  inline void set_allocated_result(::llql_proto::RelData* result);

  // @@protoc_insertion_point(class_scope:llql_proto.AdminCmd)
 private:
  inline void set_has_ct();
  inline void clear_has_ct();
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::llql_proto::Error* err_;
  ::llql_proto::RelData* result_;
  int ct_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_quark_2eproto();
  friend void protobuf_AssignDesc_quark_2eproto();
  friend void protobuf_ShutdownFile_quark_2eproto();

  void InitAsDefaultInstance();
  static AdminCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// ColData

// repeated bool isnull = 1;
inline int ColData::isnull_size() const {
  return isnull_.size();
}
inline void ColData::clear_isnull() {
  isnull_.Clear();
}
inline bool ColData::isnull(int index) const {
  return isnull_.Get(index);
}
inline void ColData::set_isnull(int index, bool value) {
  isnull_.Set(index, value);
}
inline void ColData::add_isnull(bool value) {
  isnull_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
ColData::isnull() const {
  return isnull_;
}
inline ::google::protobuf::RepeatedField< bool >*
ColData::mutable_isnull() {
  return &isnull_;
}

// repeated bool boolval = 2;
inline int ColData::boolval_size() const {
  return boolval_.size();
}
inline void ColData::clear_boolval() {
  boolval_.Clear();
}
inline bool ColData::boolval(int index) const {
  return boolval_.Get(index);
}
inline void ColData::set_boolval(int index, bool value) {
  boolval_.Set(index, value);
}
inline void ColData::add_boolval(bool value) {
  boolval_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
ColData::boolval() const {
  return boolval_;
}
inline ::google::protobuf::RepeatedField< bool >*
ColData::mutable_boolval() {
  return &boolval_;
}

// repeated int32 i32val = 3;
inline int ColData::i32val_size() const {
  return i32val_.size();
}
inline void ColData::clear_i32val() {
  i32val_.Clear();
}
inline ::google::protobuf::int32 ColData::i32val(int index) const {
  return i32val_.Get(index);
}
inline void ColData::set_i32val(int index, ::google::protobuf::int32 value) {
  i32val_.Set(index, value);
}
inline void ColData::add_i32val(::google::protobuf::int32 value) {
  i32val_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ColData::i32val() const {
  return i32val_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ColData::mutable_i32val() {
  return &i32val_;
}

// repeated int64 i64val = 4;
inline int ColData::i64val_size() const {
  return i64val_.size();
}
inline void ColData::clear_i64val() {
  i64val_.Clear();
}
inline ::google::protobuf::int64 ColData::i64val(int index) const {
  return i64val_.Get(index);
}
inline void ColData::set_i64val(int index, ::google::protobuf::int64 value) {
  i64val_.Set(index, value);
}
inline void ColData::add_i64val(::google::protobuf::int64 value) {
  i64val_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ColData::i64val() const {
  return i64val_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ColData::mutable_i64val() {
  return &i64val_;
}

// repeated float floatval = 5;
inline int ColData::floatval_size() const {
  return floatval_.size();
}
inline void ColData::clear_floatval() {
  floatval_.Clear();
}
inline float ColData::floatval(int index) const {
  return floatval_.Get(index);
}
inline void ColData::set_floatval(int index, float value) {
  floatval_.Set(index, value);
}
inline void ColData::add_floatval(float value) {
  floatval_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ColData::floatval() const {
  return floatval_;
}
inline ::google::protobuf::RepeatedField< float >*
ColData::mutable_floatval() {
  return &floatval_;
}

// repeated double doubleval = 6;
inline int ColData::doubleval_size() const {
  return doubleval_.size();
}
inline void ColData::clear_doubleval() {
  doubleval_.Clear();
}
inline double ColData::doubleval(int index) const {
  return doubleval_.Get(index);
}
inline void ColData::set_doubleval(int index, double value) {
  doubleval_.Set(index, value);
}
inline void ColData::add_doubleval(double value) {
  doubleval_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
ColData::doubleval() const {
  return doubleval_;
}
inline ::google::protobuf::RepeatedField< double >*
ColData::mutable_doubleval() {
  return &doubleval_;
}

// repeated string strval = 7;
inline int ColData::strval_size() const {
  return strval_.size();
}
inline void ColData::clear_strval() {
  strval_.Clear();
}
inline const ::std::string& ColData::strval(int index) const {
  return strval_.Get(index);
}
inline ::std::string* ColData::mutable_strval(int index) {
  return strval_.Mutable(index);
}
inline void ColData::set_strval(int index, const ::std::string& value) {
  strval_.Mutable(index)->assign(value);
}
inline void ColData::set_strval(int index, const char* value) {
  strval_.Mutable(index)->assign(value);
}
inline void ColData::set_strval(int index, const char* value, size_t size) {
  strval_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ColData::add_strval() {
  return strval_.Add();
}
inline void ColData::add_strval(const ::std::string& value) {
  strval_.Add()->assign(value);
}
inline void ColData::add_strval(const char* value) {
  strval_.Add()->assign(value);
}
inline void ColData::add_strval(const char* value, size_t size) {
  strval_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ColData::strval() const {
  return strval_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ColData::mutable_strval() {
  return &strval_;
}

// repeated bytes bytesval = 8;
inline int ColData::bytesval_size() const {
  return bytesval_.size();
}
inline void ColData::clear_bytesval() {
  bytesval_.Clear();
}
inline const ::std::string& ColData::bytesval(int index) const {
  return bytesval_.Get(index);
}
inline ::std::string* ColData::mutable_bytesval(int index) {
  return bytesval_.Mutable(index);
}
inline void ColData::set_bytesval(int index, const ::std::string& value) {
  bytesval_.Mutable(index)->assign(value);
}
inline void ColData::set_bytesval(int index, const char* value) {
  bytesval_.Mutable(index)->assign(value);
}
inline void ColData::set_bytesval(int index, const void* value, size_t size) {
  bytesval_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ColData::add_bytesval() {
  return bytesval_.Add();
}
inline void ColData::add_bytesval(const ::std::string& value) {
  bytesval_.Add()->assign(value);
}
inline void ColData::add_bytesval(const char* value) {
  bytesval_.Add()->assign(value);
}
inline void ColData::add_bytesval(const void* value, size_t size) {
  bytesval_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ColData::bytesval() const {
  return bytesval_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ColData::mutable_bytesval() {
  return &bytesval_;
}

// -------------------------------------------------------------------

// RelData

// required bool last = 1;
inline bool RelData::has_last() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelData::set_has_last() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelData::clear_has_last() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelData::clear_last() {
  last_ = false;
  clear_has_last();
}
inline bool RelData::last() const {
  return last_;
}
inline void RelData::set_last(bool value) {
  set_has_last();
  last_ = value;
}

// required int32 ntuple = 2;
inline bool RelData::has_ntuple() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RelData::set_has_ntuple() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RelData::clear_has_ntuple() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RelData::clear_ntuple() {
  ntuple_ = 0;
  clear_has_ntuple();
}
inline ::google::protobuf::int32 RelData::ntuple() const {
  return ntuple_;
}
inline void RelData::set_ntuple(::google::protobuf::int32 value) {
  set_has_ntuple();
  ntuple_ = value;
}

// required int32 ncol = 3;
inline bool RelData::has_ncol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RelData::set_has_ncol() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RelData::clear_has_ncol() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RelData::clear_ncol() {
  ncol_ = 0;
  clear_has_ncol();
}
inline ::google::protobuf::int32 RelData::ncol() const {
  return ncol_;
}
inline void RelData::set_ncol(::google::protobuf::int32 value) {
  set_has_ncol();
  ncol_ = value;
}

// repeated .llql_proto.ColData cols = 4;
inline int RelData::cols_size() const {
  return cols_.size();
}
inline void RelData::clear_cols() {
  cols_.Clear();
}
inline const ::llql_proto::ColData& RelData::cols(int index) const {
  return cols_.Get(index);
}
inline ::llql_proto::ColData* RelData::mutable_cols(int index) {
  return cols_.Mutable(index);
}
inline ::llql_proto::ColData* RelData::add_cols() {
  return cols_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llql_proto::ColData >&
RelData::cols() const {
  return cols_;
}
inline ::google::protobuf::RepeatedPtrField< ::llql_proto::ColData >*
RelData::mutable_cols() {
  return &cols_;
}

// -------------------------------------------------------------------

// QueryPartition

// required string query_id = 1;
inline bool QueryPartition::has_query_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryPartition::set_has_query_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryPartition::clear_has_query_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryPartition::clear_query_id() {
  if (query_id_ != &::google::protobuf::internal::kEmptyString) {
    query_id_->clear();
  }
  clear_has_query_id();
}
inline const ::std::string& QueryPartition::query_id() const {
  return *query_id_;
}
inline void QueryPartition::set_query_id(const ::std::string& value) {
  set_has_query_id();
  if (query_id_ == &::google::protobuf::internal::kEmptyString) {
    query_id_ = new ::std::string;
  }
  query_id_->assign(value);
}
inline void QueryPartition::set_query_id(const char* value) {
  set_has_query_id();
  if (query_id_ == &::google::protobuf::internal::kEmptyString) {
    query_id_ = new ::std::string;
  }
  query_id_->assign(value);
}
inline void QueryPartition::set_query_id(const char* value, size_t size) {
  set_has_query_id();
  if (query_id_ == &::google::protobuf::internal::kEmptyString) {
    query_id_ = new ::std::string;
  }
  query_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryPartition::mutable_query_id() {
  set_has_query_id();
  if (query_id_ == &::google::protobuf::internal::kEmptyString) {
    query_id_ = new ::std::string;
  }
  return query_id_;
}
inline ::std::string* QueryPartition::release_query_id() {
  clear_has_query_id();
  if (query_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = query_id_;
    query_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QueryPartition::set_allocated_query_id(::std::string* query_id) {
  if (query_id_ != &::google::protobuf::internal::kEmptyString) {
    delete query_id_;
  }
  if (query_id) {
    set_has_query_id();
    query_id_ = query_id;
  } else {
    clear_has_query_id();
    query_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 stage_id = 2;
inline bool QueryPartition::has_stage_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryPartition::set_has_stage_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryPartition::clear_has_stage_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryPartition::clear_stage_id() {
  stage_id_ = 0;
  clear_has_stage_id();
}
inline ::google::protobuf::int32 QueryPartition::stage_id() const {
  return stage_id_;
}
inline void QueryPartition::set_stage_id(::google::protobuf::int32 value) {
  set_has_stage_id();
  stage_id_ = value;
}

// required int32 partition = 3;
inline bool QueryPartition::has_partition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryPartition::set_has_partition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryPartition::clear_has_partition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryPartition::clear_partition() {
  partition_ = 0;
  clear_has_partition();
}
inline ::google::protobuf::int32 QueryPartition::partition() const {
  return partition_;
}
inline void QueryPartition::set_partition(::google::protobuf::int32 value) {
  set_has_partition();
  partition_ = value;
}

// required int32 total_partition = 4;
inline bool QueryPartition::has_total_partition() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryPartition::set_has_total_partition() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryPartition::clear_has_total_partition() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryPartition::clear_total_partition() {
  total_partition_ = 0;
  clear_has_total_partition();
}
inline ::google::protobuf::int32 QueryPartition::total_partition() const {
  return total_partition_;
}
inline void QueryPartition::set_total_partition(::google::protobuf::int32 value) {
  set_has_total_partition();
  total_partition_ = value;
}

// -------------------------------------------------------------------

// QuarkCmd

// required .llql_proto.QuarkCmd.CmdType ct = 1;
inline bool QuarkCmd::has_ct() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuarkCmd::set_has_ct() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuarkCmd::clear_has_ct() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuarkCmd::clear_ct() {
  ct_ = 0;
  clear_has_ct();
}
inline ::llql_proto::QuarkCmd_CmdType QuarkCmd::ct() const {
  return static_cast< ::llql_proto::QuarkCmd_CmdType >(ct_);
}
inline void QuarkCmd::set_ct(::llql_proto::QuarkCmd_CmdType value) {
  assert(::llql_proto::QuarkCmd_CmdType_IsValid(value));
  set_has_ct();
  ct_ = value;
}

// optional .llql_proto.Error err = 2;
inline bool QuarkCmd::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuarkCmd::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuarkCmd::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuarkCmd::clear_err() {
  if (err_ != NULL) err_->::llql_proto::Error::Clear();
  clear_has_err();
}
inline const ::llql_proto::Error& QuarkCmd::err() const {
  return err_ != NULL ? *err_ : *default_instance_->err_;
}
inline ::llql_proto::Error* QuarkCmd::mutable_err() {
  set_has_err();
  if (err_ == NULL) err_ = new ::llql_proto::Error;
  return err_;
}
inline ::llql_proto::Error* QuarkCmd::release_err() {
  clear_has_err();
  ::llql_proto::Error* temp = err_;
  err_ = NULL;
  return temp;
}
inline void QuarkCmd::set_allocated_err(::llql_proto::Error* err) {
  delete err_;
  err_ = err;
  if (err) {
    set_has_err();
  } else {
    clear_has_err();
  }
}

// optional string query_id = 3;
inline bool QuarkCmd::has_query_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuarkCmd::set_has_query_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuarkCmd::clear_has_query_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuarkCmd::clear_query_id() {
  if (query_id_ != &::google::protobuf::internal::kEmptyString) {
    query_id_->clear();
  }
  clear_has_query_id();
}
inline const ::std::string& QuarkCmd::query_id() const {
  return *query_id_;
}
inline void QuarkCmd::set_query_id(const ::std::string& value) {
  set_has_query_id();
  if (query_id_ == &::google::protobuf::internal::kEmptyString) {
    query_id_ = new ::std::string;
  }
  query_id_->assign(value);
}
inline void QuarkCmd::set_query_id(const char* value) {
  set_has_query_id();
  if (query_id_ == &::google::protobuf::internal::kEmptyString) {
    query_id_ = new ::std::string;
  }
  query_id_->assign(value);
}
inline void QuarkCmd::set_query_id(const char* value, size_t size) {
  set_has_query_id();
  if (query_id_ == &::google::protobuf::internal::kEmptyString) {
    query_id_ = new ::std::string;
  }
  query_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QuarkCmd::mutable_query_id() {
  set_has_query_id();
  if (query_id_ == &::google::protobuf::internal::kEmptyString) {
    query_id_ = new ::std::string;
  }
  return query_id_;
}
inline ::std::string* QuarkCmd::release_query_id() {
  clear_has_query_id();
  if (query_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = query_id_;
    query_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QuarkCmd::set_allocated_query_id(::std::string* query_id) {
  if (query_id_ != &::google::protobuf::internal::kEmptyString) {
    delete query_id_;
  }
  if (query_id) {
    set_has_query_id();
    query_id_ = query_id;
  } else {
    clear_has_query_id();
    query_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes query = 4;
inline bool QuarkCmd::has_query() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuarkCmd::set_has_query() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuarkCmd::clear_has_query() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuarkCmd::clear_query() {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    query_->clear();
  }
  clear_has_query();
}
inline const ::std::string& QuarkCmd::query() const {
  return *query_;
}
inline void QuarkCmd::set_query(const ::std::string& value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void QuarkCmd::set_query(const char* value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void QuarkCmd::set_query(const void* value, size_t size) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QuarkCmd::mutable_query() {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  return query_;
}
inline ::std::string* QuarkCmd::release_query() {
  clear_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = query_;
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QuarkCmd::set_allocated_query(::std::string* query) {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    delete query_;
  }
  if (query) {
    set_has_query();
    query_ = query;
  } else {
    clear_has_query();
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .llql_proto.QueryPartition query_partition = 5;
inline bool QuarkCmd::has_query_partition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QuarkCmd::set_has_query_partition() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QuarkCmd::clear_has_query_partition() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QuarkCmd::clear_query_partition() {
  if (query_partition_ != NULL) query_partition_->::llql_proto::QueryPartition::Clear();
  clear_has_query_partition();
}
inline const ::llql_proto::QueryPartition& QuarkCmd::query_partition() const {
  return query_partition_ != NULL ? *query_partition_ : *default_instance_->query_partition_;
}
inline ::llql_proto::QueryPartition* QuarkCmd::mutable_query_partition() {
  set_has_query_partition();
  if (query_partition_ == NULL) query_partition_ = new ::llql_proto::QueryPartition;
  return query_partition_;
}
inline ::llql_proto::QueryPartition* QuarkCmd::release_query_partition() {
  clear_has_query_partition();
  ::llql_proto::QueryPartition* temp = query_partition_;
  query_partition_ = NULL;
  return temp;
}
inline void QuarkCmd::set_allocated_query_partition(::llql_proto::QueryPartition* query_partition) {
  delete query_partition_;
  query_partition_ = query_partition;
  if (query_partition) {
    set_has_query_partition();
  } else {
    clear_has_query_partition();
  }
}

// optional .llql_proto.RelData query_result = 6;
inline bool QuarkCmd::has_query_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QuarkCmd::set_has_query_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QuarkCmd::clear_has_query_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QuarkCmd::clear_query_result() {
  if (query_result_ != NULL) query_result_->::llql_proto::RelData::Clear();
  clear_has_query_result();
}
inline const ::llql_proto::RelData& QuarkCmd::query_result() const {
  return query_result_ != NULL ? *query_result_ : *default_instance_->query_result_;
}
inline ::llql_proto::RelData* QuarkCmd::mutable_query_result() {
  set_has_query_result();
  if (query_result_ == NULL) query_result_ = new ::llql_proto::RelData;
  return query_result_;
}
inline ::llql_proto::RelData* QuarkCmd::release_query_result() {
  clear_has_query_result();
  ::llql_proto::RelData* temp = query_result_;
  query_result_ = NULL;
  return temp;
}
inline void QuarkCmd::set_allocated_query_result(::llql_proto::RelData* query_result) {
  delete query_result_;
  query_result_ = query_result;
  if (query_result) {
    set_has_query_result();
  } else {
    clear_has_query_result();
  }
}

// -------------------------------------------------------------------

// HostInfo

// required int32 host_id = 1;
inline bool HostInfo::has_host_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HostInfo::set_has_host_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HostInfo::clear_has_host_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HostInfo::clear_host_id() {
  host_id_ = 0;
  clear_has_host_id();
}
inline ::google::protobuf::int32 HostInfo::host_id() const {
  return host_id_;
}
inline void HostInfo::set_host_id(::google::protobuf::int32 value) {
  set_has_host_id();
  host_id_ = value;
}

// required int32 host_gen = 2;
inline bool HostInfo::has_host_gen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HostInfo::set_has_host_gen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HostInfo::clear_has_host_gen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HostInfo::clear_host_gen() {
  host_gen_ = 0;
  clear_has_host_gen();
}
inline ::google::protobuf::int32 HostInfo::host_gen() const {
  return host_gen_;
}
inline void HostInfo::set_host_gen(::google::protobuf::int32 value) {
  set_has_host_gen();
  host_gen_ = value;
}

// required string hostname = 3;
inline bool HostInfo::has_hostname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HostInfo::set_has_hostname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HostInfo::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HostInfo::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& HostInfo::hostname() const {
  return *hostname_;
}
inline void HostInfo::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void HostInfo::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void HostInfo::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HostInfo::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* HostInfo::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HostInfo::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 listen_port = 4;
inline bool HostInfo::has_listen_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HostInfo::set_has_listen_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HostInfo::clear_has_listen_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HostInfo::clear_listen_port() {
  listen_port_ = 0;
  clear_has_listen_port();
}
inline ::google::protobuf::int32 HostInfo::listen_port() const {
  return listen_port_;
}
inline void HostInfo::set_listen_port(::google::protobuf::int32 value) {
  set_has_listen_port();
  listen_port_ = value;
}

// -------------------------------------------------------------------

// LLQLCmd

// required .llql_proto.LLQLCmd.CmdType ct = 1;
inline bool LLQLCmd::has_ct() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LLQLCmd::set_has_ct() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LLQLCmd::clear_has_ct() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LLQLCmd::clear_ct() {
  ct_ = 0;
  clear_has_ct();
}
inline ::llql_proto::LLQLCmd_CmdType LLQLCmd::ct() const {
  return static_cast< ::llql_proto::LLQLCmd_CmdType >(ct_);
}
inline void LLQLCmd::set_ct(::llql_proto::LLQLCmd_CmdType value) {
  assert(::llql_proto::LLQLCmd_CmdType_IsValid(value));
  set_has_ct();
  ct_ = value;
}

// optional .llql_proto.Error err = 2;
inline bool LLQLCmd::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LLQLCmd::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LLQLCmd::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LLQLCmd::clear_err() {
  if (err_ != NULL) err_->::llql_proto::Error::Clear();
  clear_has_err();
}
inline const ::llql_proto::Error& LLQLCmd::err() const {
  return err_ != NULL ? *err_ : *default_instance_->err_;
}
inline ::llql_proto::Error* LLQLCmd::mutable_err() {
  set_has_err();
  if (err_ == NULL) err_ = new ::llql_proto::Error;
  return err_;
}
inline ::llql_proto::Error* LLQLCmd::release_err() {
  clear_has_err();
  ::llql_proto::Error* temp = err_;
  err_ = NULL;
  return temp;
}
inline void LLQLCmd::set_allocated_err(::llql_proto::Error* err) {
  delete err_;
  err_ = err;
  if (err) {
    set_has_err();
  } else {
    clear_has_err();
  }
}

// repeated .llql_proto.HostInfo host_info = 3;
inline int LLQLCmd::host_info_size() const {
  return host_info_.size();
}
inline void LLQLCmd::clear_host_info() {
  host_info_.Clear();
}
inline const ::llql_proto::HostInfo& LLQLCmd::host_info(int index) const {
  return host_info_.Get(index);
}
inline ::llql_proto::HostInfo* LLQLCmd::mutable_host_info(int index) {
  return host_info_.Mutable(index);
}
inline ::llql_proto::HostInfo* LLQLCmd::add_host_info() {
  return host_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llql_proto::HostInfo >&
LLQLCmd::host_info() const {
  return host_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::llql_proto::HostInfo >*
LLQLCmd::mutable_host_info() {
  return &host_info_;
}

// optional .llql_proto.QueryPartition query_partition = 4;
inline bool LLQLCmd::has_query_partition() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LLQLCmd::set_has_query_partition() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LLQLCmd::clear_has_query_partition() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LLQLCmd::clear_query_partition() {
  if (query_partition_ != NULL) query_partition_->::llql_proto::QueryPartition::Clear();
  clear_has_query_partition();
}
inline const ::llql_proto::QueryPartition& LLQLCmd::query_partition() const {
  return query_partition_ != NULL ? *query_partition_ : *default_instance_->query_partition_;
}
inline ::llql_proto::QueryPartition* LLQLCmd::mutable_query_partition() {
  set_has_query_partition();
  if (query_partition_ == NULL) query_partition_ = new ::llql_proto::QueryPartition;
  return query_partition_;
}
inline ::llql_proto::QueryPartition* LLQLCmd::release_query_partition() {
  clear_has_query_partition();
  ::llql_proto::QueryPartition* temp = query_partition_;
  query_partition_ = NULL;
  return temp;
}
inline void LLQLCmd::set_allocated_query_partition(::llql_proto::QueryPartition* query_partition) {
  delete query_partition_;
  query_partition_ = query_partition;
  if (query_partition) {
    set_has_query_partition();
  } else {
    clear_has_query_partition();
  }
}

// optional bytes query_string = 5;
inline bool LLQLCmd::has_query_string() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LLQLCmd::set_has_query_string() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LLQLCmd::clear_has_query_string() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LLQLCmd::clear_query_string() {
  if (query_string_ != &::google::protobuf::internal::kEmptyString) {
    query_string_->clear();
  }
  clear_has_query_string();
}
inline const ::std::string& LLQLCmd::query_string() const {
  return *query_string_;
}
inline void LLQLCmd::set_query_string(const ::std::string& value) {
  set_has_query_string();
  if (query_string_ == &::google::protobuf::internal::kEmptyString) {
    query_string_ = new ::std::string;
  }
  query_string_->assign(value);
}
inline void LLQLCmd::set_query_string(const char* value) {
  set_has_query_string();
  if (query_string_ == &::google::protobuf::internal::kEmptyString) {
    query_string_ = new ::std::string;
  }
  query_string_->assign(value);
}
inline void LLQLCmd::set_query_string(const void* value, size_t size) {
  set_has_query_string();
  if (query_string_ == &::google::protobuf::internal::kEmptyString) {
    query_string_ = new ::std::string;
  }
  query_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LLQLCmd::mutable_query_string() {
  set_has_query_string();
  if (query_string_ == &::google::protobuf::internal::kEmptyString) {
    query_string_ = new ::std::string;
  }
  return query_string_;
}
inline ::std::string* LLQLCmd::release_query_string() {
  clear_has_query_string();
  if (query_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = query_string_;
    query_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LLQLCmd::set_allocated_query_string(::std::string* query_string) {
  if (query_string_ != &::google::protobuf::internal::kEmptyString) {
    delete query_string_;
  }
  if (query_string) {
    set_has_query_string();
    query_string_ = query_string;
  } else {
    clear_has_query_string();
    query_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .llql_proto.RelData query_result = 6;
inline bool LLQLCmd::has_query_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LLQLCmd::set_has_query_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LLQLCmd::clear_has_query_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LLQLCmd::clear_query_result() {
  if (query_result_ != NULL) query_result_->::llql_proto::RelData::Clear();
  clear_has_query_result();
}
inline const ::llql_proto::RelData& LLQLCmd::query_result() const {
  return query_result_ != NULL ? *query_result_ : *default_instance_->query_result_;
}
inline ::llql_proto::RelData* LLQLCmd::mutable_query_result() {
  set_has_query_result();
  if (query_result_ == NULL) query_result_ = new ::llql_proto::RelData;
  return query_result_;
}
inline ::llql_proto::RelData* LLQLCmd::release_query_result() {
  clear_has_query_result();
  ::llql_proto::RelData* temp = query_result_;
  query_result_ = NULL;
  return temp;
}
inline void LLQLCmd::set_allocated_query_result(::llql_proto::RelData* query_result) {
  delete query_result_;
  query_result_ = query_result;
  if (query_result) {
    set_has_query_result();
  } else {
    clear_has_query_result();
  }
}

// -------------------------------------------------------------------

// AdminCmd

// required .llql_proto.AdminCmd.CmdType ct = 1;
inline bool AdminCmd::has_ct() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdminCmd::set_has_ct() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdminCmd::clear_has_ct() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdminCmd::clear_ct() {
  ct_ = 0;
  clear_has_ct();
}
inline ::llql_proto::AdminCmd_CmdType AdminCmd::ct() const {
  return static_cast< ::llql_proto::AdminCmd_CmdType >(ct_);
}
inline void AdminCmd::set_ct(::llql_proto::AdminCmd_CmdType value) {
  assert(::llql_proto::AdminCmd_CmdType_IsValid(value));
  set_has_ct();
  ct_ = value;
}

// optional .llql_proto.Error err = 2;
inline bool AdminCmd::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdminCmd::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdminCmd::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdminCmd::clear_err() {
  if (err_ != NULL) err_->::llql_proto::Error::Clear();
  clear_has_err();
}
inline const ::llql_proto::Error& AdminCmd::err() const {
  return err_ != NULL ? *err_ : *default_instance_->err_;
}
inline ::llql_proto::Error* AdminCmd::mutable_err() {
  set_has_err();
  if (err_ == NULL) err_ = new ::llql_proto::Error;
  return err_;
}
inline ::llql_proto::Error* AdminCmd::release_err() {
  clear_has_err();
  ::llql_proto::Error* temp = err_;
  err_ = NULL;
  return temp;
}
inline void AdminCmd::set_allocated_err(::llql_proto::Error* err) {
  delete err_;
  err_ = err;
  if (err) {
    set_has_err();
  } else {
    clear_has_err();
  }
}

// optional .llql_proto.RelData result = 3;
inline bool AdminCmd::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdminCmd::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdminCmd::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdminCmd::clear_result() {
  if (result_ != NULL) result_->::llql_proto::RelData::Clear();
  clear_has_result();
}
inline const ::llql_proto::RelData& AdminCmd::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::llql_proto::RelData* AdminCmd::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::llql_proto::RelData;
  return result_;
}
inline ::llql_proto::RelData* AdminCmd::release_result() {
  clear_has_result();
  ::llql_proto::RelData* temp = result_;
  result_ = NULL;
  return temp;
}
inline void AdminCmd::set_allocated_result(::llql_proto::RelData* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llql_proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llql_proto::QuarkCmd_CmdType>() {
  return ::llql_proto::QuarkCmd_CmdType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llql_proto::LLQLCmd_CmdType>() {
  return ::llql_proto::LLQLCmd_CmdType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llql_proto::AdminCmd_CmdType>() {
  return ::llql_proto::AdminCmd_CmdType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llql_proto::Magic>() {
  return ::llql_proto::Magic_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llql_proto::MessageType>() {
  return ::llql_proto::MessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_quark_2eproto__INCLUDED
